<?xml version="1.0" encoding="UTF-8"?>
<microprocessor name="Gimball Controller" description="No description set." width="4" length="2" id_counter="46" id_counter_node="8" sym5="28" sym6="98" sym7="170" sym8="298" sym9="546" sym10="1054" sym11="2052" sym12="2056" sym13="2064" sym14="4064">
	<nodes>
		<n id="1" component_id="5">
			<node label="Touch" mode="1" type="5" description="The input signal to be processed."/>
		</n>
		<n id="2" component_id="8">
			<node label="Output" type="6" description="The input signal to be processed.">
				<position x="2"/>
			</node>
		</n>
		<n id="4" component_id="30">
			<node label="Gimball" mode="1" type="6" description="The input signal to be processed.">
				<position x="1"/>
			</node>
		</n>
		<n id="5" component_id="32">
			<node label="Infrared" description="The input signal to be processed.">
				<position x="3" z="1"/>
			</node>
		</n>
		<n id="6" component_id="35">
			<node label="Pivot Rotation" type="1" description="The input signal to be processed.">
				<position z="1"/>
			</node>
		</n>
		<n id="7" component_id="38">
			<node label="Pitch Rotation" type="1" description="The input signal to be processed.">
				<position x="2" z="1"/>
			</node>
		</n>
		<n id="8" component_id="41">
			<node label="FOV" type="1" description="The input signal to be processed.">
				<position x="1" z="1"/>
			</node>
		</n>
	</nodes>
	<group>
		<data>
			<inputs/>
			<outputs/>
		</data>
		<components>
			<c type="56">
				<object id="27" script='green = {50, 200, 50, 200}
black = {0, 0, 0, 160}

pivotSpeed = 0.005
pivot = 0

pitchSpeed = 0.005
pitch = 0

zoomSpeed = 0.005
fov = 0

infrared = false
lastInfrared = false

--anchor example(x, y). Range[0;1]
bottomRight = {1, 1}

--1. Add button(width, height, color, text, textColor, anchor, offsetX, offsetY)
pivotP = {6, 7, black, "&gt;", green, bottomRight, 0, 0}
pivotM = {6, 7, black, "&lt;", green, bottomRight, -6, 0}

pitchM = {6, 7, black, "v", green, bottomRight, 0, -7}
pitchP = {6, 7, black, "^", green, bottomRight, 0, -14}

zoomIn = {6, 7, black, "+", green, bottomRight, 0, -21}
zoomOut = {6, 7, black, "-", green, bottomRight, -6, -21}

infra = {6, 7, black, "I", green, bottomRight, 0, -28}

function onTick()
	w = input.getNumber(1)
	h = input.getNumber(2)
	inputX = input.getNumber(3)
	inputY = input.getNumber(4)
	isPressed = input.getBool(1)
	
	

	--2. Perform an action if it&apos;s pressed
	currentButton = infra
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)) then 
		if (not lastInfrared) then
			infrared = not infrared
		end
		lastInfrared = true
	else
		lastInfrared = false
	end
	
	currentButton = pivotM
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and pivot &lt; 1) then 
		if (pitch &gt;= 0) then pivot = pivot + pivotSpeed
		else pivot = pivot - pivotSpeed end
	end
	
	currentButton = pivotP
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and pivot &gt; -1) then 
		if (pitch &gt;=0) then pivot = pivot - pivotSpeed
		else pivot = pivot + pivotSpeed end
	end
	
	currentButton = pitchP
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and pitch &lt; 1) then 
		pitch = pitch + pitchSpeed
	end
	
	currentButton = pitchM
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and pitch &gt; -1) then 
		pitch = pitch - pitchSpeed
	end
	
	currentButton = zoomOut
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and fov &gt; 0) then 
		fov = fov - zoomSpeed
	end
	
	currentButton = zoomIn
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and fov &lt; 1) then 
		fov = fov + zoomSpeed
	end
	
	output.setBool(1, infrared)
	output.setNumber(1, pivot)
	output.setNumber(2, pitch)
	output.setNumber(3, fov)
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()					
	
	--4. Draw the button
	drawButton(pivotP)
	drawButton(pivotM)
	drawButton(pitchP)
	drawButton(pitchM)
	drawButton(zoomIn)
	drawButton(zoomOut)
	drawButton(infra)
end

function isPointInRectangle(x, y, w, h, button)
	rectX = button[6][1] * (w - button[1]) + button[7]
	rectY = button[6][2] * (h - button[2]) + button[8]
	rectW = button[1]
	rectH = button[2]
	return x &gt; rectX and y &gt; rectY and x &lt; rectX+rectW and y &lt; rectY+rectH
end

function drawButton(button)
	x = button[6][1] * (w - button[1]) + button[7]
	y = button[6][2] * (h - button[2]) + button[8]
	width = button[1]
	height = button[2]
	
	screen.setColor(table.unpack(button[3]))
	screen.drawRectF(x, y, width, height)
	
	frameColor = {button[3][1] * 0.8, button[3][2] * 0.8, button[3][3] * 0.8, 255}
	screen.setColor(table.unpack(frameColor))
	screen.drawRect(x, y, width, height)
	
	screen.setColor(table.unpack(button[5]))
	screen.drawTextBox(x, y, width, height, button[4], 1, 1)
end'>
					<pos x="-3.5" y="-0.5"/>
					<in1 component_id="5">
						<v 01="32" 02="32" 03="27" 04="16"/>
					</in1>
					<in2 component_id="30">
						<v/>
					</in2>
					<out1>
						<v 02="0.165"/>
					</out1>
					<out2>
						<v/>
					</out2>
				</object>
			</c>
			<c type="31">
				<object id="42">
					<pos x="-2.5" y="1.5"/>
					<in1 component_id="27">
						<v 02="0.165"/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="31">
				<object id="43" i="1">
					<pos x="-2.5" y="1"/>
					<in1 component_id="27">
						<v 02="0.165"/>
					</in1>
					<out1 v="0.165"/>
				</object>
			</c>
			<c type="31">
				<object id="44" i="2">
					<pos x="-2.5" y="0.5"/>
					<in1 component_id="27">
						<v 02="0.165"/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="29">
				<object id="45">
					<pos x="-2.5" y="2"/>
					<in1 component_id="27">
						<v 02="0.165"/>
					</in1>
					<out1/>
				</object>
			</c>
		</components>
		<components_bridge>
			<c type="4">
				<object id="5">
					<pos x="-5" y="-0.25"/>
					<in1>
						<v 01="32" 02="32" 03="27" 04="16"/>
					</in1>
					<out1>
						<v 01="32" 02="32" 03="27" 04="16"/>
					</out1>
				</object>
			</c>
			<c type="7">
				<object id="8">
					<pos x="-2.5" y="-1.25"/>
					<in1 component_id="27" node_index="1">
						<v/>
					</in1>
					<out1>
						<v/>
					</out1>
				</object>
			</c>
			<c type="6">
				<object id="30">
					<pos x="-5" y="-0.75"/>
					<in1>
						<v/>
					</in1>
					<out1>
						<v/>
					</out1>
				</object>
			</c>
			<c type="1">
				<object id="32">
					<pos x="-1.25" y="2"/>
					<in1 component_id="45"/>
					<out1/>
				</object>
			</c>
			<c type="3">
				<object id="35">
					<pos x="-1.25" y="1.5"/>
					<in1 component_id="42"/>
					<out1/>
				</object>
			</c>
			<c type="3">
				<object id="38">
					<pos x="-1.25" y="1"/>
					<in1 component_id="43" v="0.165"/>
					<out1 v="0.165"/>
				</object>
			</c>
			<c type="3">
				<object id="41">
					<pos x="-1.25" y="0.5"/>
					<in1 component_id="44"/>
					<out1/>
				</object>
			</c>
		</components_bridge>
		<groups/>
		<component_states>
			<c0 id="27" script='green = {50, 200, 50, 200}
black = {0, 0, 0, 160}

pivotSpeed = 0.005
pivot = 0

pitchSpeed = 0.005
pitch = 0

zoomSpeed = 0.005
fov = 0

infrared = false
lastInfrared = false

--anchor example(x, y). Range[0;1]
bottomRight = {1, 1}

--1. Add button(width, height, color, text, textColor, anchor, offsetX, offsetY)
pivotP = {6, 7, black, "&gt;", green, bottomRight, 0, 0}
pivotM = {6, 7, black, "&lt;", green, bottomRight, -6, 0}

pitchM = {6, 7, black, "v", green, bottomRight, 0, -7}
pitchP = {6, 7, black, "^", green, bottomRight, 0, -14}

zoomIn = {6, 7, black, "+", green, bottomRight, 0, -21}
zoomOut = {6, 7, black, "-", green, bottomRight, -6, -21}

infra = {6, 7, black, "I", green, bottomRight, 0, -28}

function onTick()
	w = input.getNumber(1)
	h = input.getNumber(2)
	inputX = input.getNumber(3)
	inputY = input.getNumber(4)
	isPressed = input.getBool(1)
	
	

	--2. Perform an action if it&apos;s pressed
	currentButton = infra
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)) then 
		if (not lastInfrared) then
			infrared = not infrared
		end
		lastInfrared = true
	else
		lastInfrared = false
	end
	
	currentButton = pivotM
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and pivot &lt; 1) then 
		if (pitch &gt;= 0) then pivot = pivot + pivotSpeed
		else pivot = pivot - pivotSpeed end
	end
	
	currentButton = pivotP
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and pivot &gt; -1) then 
		if (pitch &gt;=0) then pivot = pivot - pivotSpeed
		else pivot = pivot + pivotSpeed end
	end
	
	currentButton = pitchP
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and pitch &lt; 1) then 
		pitch = pitch + pitchSpeed
	end
	
	currentButton = pitchM
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and pitch &gt; -1) then 
		pitch = pitch - pitchSpeed
	end
	
	currentButton = zoomOut
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and fov &gt; 0) then 
		fov = fov - zoomSpeed
	end
	
	currentButton = zoomIn
	if (isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton) and fov &lt; 1) then 
		fov = fov + zoomSpeed
	end
	
	output.setBool(1, infrared)
	output.setNumber(1, pivot)
	output.setNumber(2, pitch)
	output.setNumber(3, fov)
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()					
	
	--4. Draw the button
	drawButton(pivotP)
	drawButton(pivotM)
	drawButton(pitchP)
	drawButton(pitchM)
	drawButton(zoomIn)
	drawButton(zoomOut)
	drawButton(infra)
end

function isPointInRectangle(x, y, w, h, button)
	rectX = button[6][1] * (w - button[1]) + button[7]
	rectY = button[6][2] * (h - button[2]) + button[8]
	rectW = button[1]
	rectH = button[2]
	return x &gt; rectX and y &gt; rectY and x &lt; rectX+rectW and y &lt; rectY+rectH
end

function drawButton(button)
	x = button[6][1] * (w - button[1]) + button[7]
	y = button[6][2] * (h - button[2]) + button[8]
	width = button[1]
	height = button[2]
	
	screen.setColor(table.unpack(button[3]))
	screen.drawRectF(x, y, width, height)
	
	frameColor = {button[3][1] * 0.8, button[3][2] * 0.8, button[3][3] * 0.8, 255}
	screen.setColor(table.unpack(frameColor))
	screen.drawRect(x, y, width, height)
	
	screen.setColor(table.unpack(button[5]))
	screen.drawTextBox(x, y, width, height, button[4], 1, 1)
end'>
				<pos x="-3.5" y="-0.5"/>
				<in1 component_id="5">
					<v 01="32" 02="32" 03="27" 04="16"/>
				</in1>
				<in2 component_id="30">
					<v/>
				</in2>
				<out1>
					<v 02="0.165"/>
				</out1>
				<out2>
					<v/>
				</out2>
			</c0>
			<c1 id="42">
				<pos x="-2.5" y="1.5"/>
				<in1 component_id="27">
					<v 02="0.165"/>
				</in1>
				<out1/>
			</c1>
			<c2 id="43" i="1">
				<pos x="-2.5" y="1"/>
				<in1 component_id="27">
					<v 02="0.165"/>
				</in1>
				<out1 v="0.165"/>
			</c2>
			<c3 id="44" i="2">
				<pos x="-2.5" y="0.5"/>
				<in1 component_id="27">
					<v 02="0.165"/>
				</in1>
				<out1/>
			</c3>
			<c4 id="45">
				<pos x="-2.5" y="2"/>
				<in1 component_id="27">
					<v 02="0.165"/>
				</in1>
				<out1/>
			</c4>
		</component_states>
		<component_bridge_states>
			<c0 id="5">
				<pos x="-5" y="-0.25"/>
				<in1>
					<v 01="32" 02="32" 03="27" 04="16"/>
				</in1>
				<out1>
					<v 01="32" 02="32" 03="27" 04="16"/>
				</out1>
			</c0>
			<c1 id="8">
				<pos x="-2.5" y="-1.25"/>
				<in1 component_id="27" node_index="1">
					<v/>
				</in1>
				<out1>
					<v/>
				</out1>
			</c1>
			<c2 id="30">
				<pos x="-5" y="-0.75"/>
				<in1>
					<v/>
				</in1>
				<out1>
					<v/>
				</out1>
			</c2>
			<c3 id="32">
				<pos x="-1.25" y="2"/>
				<in1 component_id="45"/>
				<out1/>
			</c3>
			<c4 id="35">
				<pos x="-1.25" y="1.5"/>
				<in1 component_id="42"/>
				<out1/>
			</c4>
			<c5 id="38">
				<pos x="-1.25" y="1"/>
				<in1 component_id="43" v="0.165"/>
				<out1 v="0.165"/>
			</c5>
			<c6 id="41">
				<pos x="-1.25" y="0.5"/>
				<in1 component_id="44"/>
				<out1/>
			</c6>
		</component_bridge_states>
		<group_states/>
	</group>
</microprocessor>

