<?xml version="1.0" encoding="UTF-8"?>
<microprocessor name="Properties 4x" description="No description set." width="3" length="2" id_counter="148" id_counter_node="15" sym0="512" sym1="512" sym2="13196" sym3="19090" sym4="17026" sym5="16386" sym6="40965" sym7="33153" sym8="33153" sym9="41029" sym10="16418" sym11="20498" sym12="24582" sym13="12876" sym14="7224" sym15="960">
	<nodes>
		<n id="4" component_id="12">
			<node label="1st Property" mode="1" type="1" description="The input signal to be processed.">
				<position z="1"/>
			</node>
		</n>
		<n id="5" component_id="15">
			<node label="2nd Property" mode="1" type="1" description="The input signal to be processed.">
				<position x="1" z="1"/>
			</node>
		</n>
		<n id="6" component_id="16">
			<node label="3rd Property" mode="1" type="1" description="The input signal to be processed.">
				<position x="2" z="1"/>
			</node>
		</n>
		<n id="13" component_id="92">
			<node label="4rd Property" mode="1" type="1" description="The input signal to be processed.">
				<position x="2"/>
			</node>
		</n>
		<n id="14" component_id="94">
			<node label="Touch" mode="1" type="5" description="The input signal to be processed.">
				<position x="1"/>
			</node>
		</n>
		<n id="15" component_id="96">
			<node label="Monitor" type="6" description="The input signal to be processed."/>
		</n>
	</nodes>
	<group>
		<data>
			<inputs/>
			<outputs/>
		</data>
		<components>
			<c type="56">
				<object id="41" script='mode = false
lastPressed = false
fullscreen = false
gridSize = 2
iterator = 1

width = property.getNumber("Width")
height = property.getNumber("Height")

count = width * height

function onTick()
	isPressed = input.getBool(1)
	w = input.getNumber(1)
	h = input.getNumber(2)
	inputX = input.getNumber(3)
	inputY = input.getNumber(4)
	
	if (fullscreen and isPressed and not lastPressed) then
		back = isPointInRectangle(inputX, inputY, 0, 0, w/2, h/2)
		forward = isPointInRectangle(inputX, inputY, w/2, 0, w/2, h/2)
		mode = isPointInRectangle(inputX, inputY, 0, h/2, w, h/2)
	elseif (not fullscreen and isPressed and not lastPressed) then
		mode = true
	else
		mode = false
		back = false
		forward = false
	end
	
	if (mode and fullscreen) then
		fullscreen = false
		gridSize = math.min(width, height)
	elseif (mode and not fullscreen) then
		fullscreen = true
		gridSize = 1
	end
	
	if (forward) then iterator = iterator + 1
	elseif (back) then iterator = iterator - 1 end
	
	if (iterator &gt; count) then iterator = 1
	elseif (iterator &lt; 1) then iterator = count end
	
	lastPressed = isPressed
	
	output.setBool(1, fullscreen)
	output.setNumber(17, iterator)
end

function onDraw()
	if (not fullscreen) then
		drawGrid(width, height)
	else
		drawGrid(1, 1)
	end
end

function drawGrid(width, height)
	screen.setColor(10, 10, 10)
	w, h = screen.getWidth(), screen.getHeight()
	
	for i = 1, height do
		for j = 1, width do
			screen.drawRect(w/width * (j - 1), h/height * (i - 1), w/width - 1, h/height - 1)
		end
	end
end
	
function isPointInRectangle(x, y, rectX, rectY, rectW, rectH)
	return x &gt; rectX and y &gt; rectY and x &lt; rectX+rectW and y &lt; rectY+rectH
end'>
					<pos y="2.75"/>
					<in1 component_id="94">
						<v 01="96" 02="32"/>
					</in1>
					<in2>
						<v/>
					</in2>
					<out1>
						<v 17="1"/>
					</out1>
					<out2>
						<v/>
					</out2>
				</object>
			</c>
			<c type="40">
				<object id="56" count="16">
					<pos x="1" y="-2.5"/>
					<inc component_id="41">
						<v 17="1"/>
					</inc>
					<in1 component_id="130" v="4"/>
					<in2 component_id="12" v="0.000594"/>
					<in3 component_id="132"/>
					<in4 component_id="133" v="100"/>
					<in5 component_id="134" v="1"/>
					<in6 component_id="15"/>
					<in7 component_id="136"/>
					<in8 component_id="137" v="100"/>
					<in9 component_id="138" v="4"/>
					<in10 component_id="16" v="1392.79834"/>
					<in11 component_id="140"/>
					<in12 component_id="141" v="1400"/>
					<in13 component_id="142" v="3"/>
					<in14 component_id="92" v="1.999388"/>
					<in15 component_id="144"/>
					<in16 component_id="145" v="2"/>
					<out1>
						<v 01="4" 02="0.000594" 04="100" 05="1" 08="100" 09="4" 10="1392.79834" 12="1400" 13="3" 14="1.999388" 16="2" 17="1"/>
					</out1>
				</object>
			</c>
			<c type="56">
				<object id="117" script='function clamp(value, min, max)
	if (value &gt; max) then return max
	elseif (value &lt; min) then return min
	else return value end
end

types,values,lastValues,deltas={},{},{},{}

tickTime = 0

width,height=property.getNumber("Width"),property.getNumber("Height")

cWidth, cHeight, count = width, height, clamp(width * height, 1, 4)

for i = 1, count do
	types[i] = 0
	values[i] = {0}
	lastValues[i] = 0
	deltas[i] = 0
end

--type, value, name, min, max
function onTick()
	tickTime = tickTime + 1
	if (tickTime &gt;= 60) then
		tickTime = 0
		
		for i = 1, count do
			deltas[i] = values[i][2] - lastValues[i]
			lastValues[i] = values[i][2]
		end
	end
	
	fullscreen = input.getBool(1)
	iterator = input.getNumber(17)
	
	
	
	
	if (fullscreen) then gridSize = 1
	else gridSize = math.min(width, height) end
	

	for i = 1, count do
		index = (i-1) * 4 + 1
		types[i] = input.getNumber(index)
		values[i][1] = property.getText("Name " .. tostring(i))
		values[i][2] = input.getNumber(index + 1)
		values[i][3] = input.getNumber(index + 2)
		values[i][4] = input.getNumber(index + 3)
	end
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()

	if (not fullscreen) then 
		cWidth, cHeight = width, height
		for k, v in pairs(types) do
			if (v == 1) then
				drawDial(k, values[k])
			elseif (v == 2) then 
				drawDelta(k, values[k], deltas[k])
			elseif (v == 3) then
				drawBat(k, values[k])
			end
		end
	else
		cWidth, cHeight = 1, 1
		if (types[iterator] == 1) then
			drawDial(1, values[iterator])
		elseif (types[iterator] == 2) then
			drawDelta(1, values[iterator], deltas[iterator])
		elseif (types[iterator] == 3) then
			drawBat(1, values[iterator])
		end
	end
	
end
	
function drawDial(spot, value)
	spot = spot - 1
	i = math.floor(spot / cWidth)
	j = spot - i * cWidth
	
	centerX = (w/cWidth) * j + w / (cWidth * 2)
	centerY = (h/cHeight) * i + h / (cHeight * 2) - 1
	degrees = ((value[2] - value[3]) / (value[4] - value[3]) * 270) + 135
	cellW = w / cWidth
	cellH = h / cHeight
	radius = math.min(cellW, cellH) / 2 - 1.5
	
	lineX = centerX + (radius - 1) * math.cos(math.rad(degrees))
	lineY = centerY + (radius - 1) * math.sin(math.rad(degrees))
	
	screen.setColor(50, 50, 50)
	screen.drawCircle(centerX, centerY, radius)
	
	screen.setColor(0, 255, 255)
	screen.drawTextBox(centerX - cellW / 2 + 1, centerY - cellH / 2 + 4, cellW, cellH, value[1], 0, -1)
	
	screen.setColor(0, 0, 0)
	length = math.floor(0.7 * radius)
	screen.drawRectF(centerX - length, centerY + radius / 2, length * 2 + 1, cellH - (centerY + radius / 2) - i * cellH - 1)
	
	screen.setColor(255, 0, 0)
	screen.drawLine(centerX, centerY, lineX, lineY)
end
	
function drawDelta(spot, value, delta)
	spot = spot - 1
	cellW = w / cWidth
	cellH = h / cHeight
	i = math.floor(spot / cWidth)
	j = spot - i * cWidth
	x = j * cellW + 1
	y = i * cellH + 1
	
	screen.setColor(255, 255, 255)
	screen.drawTextBox(x, y + cellH / 2, cellW + 2, cellH / 2, string.format("%.2f", delta), 0, -1)
	screen.setColor(0, 255, 255)
	screen.drawTextBox(x, y - 6, cellW, cellH, value[1], 0, 0)
end
	
function drawBat(spot, value)
	spot = spot - 1
	cellW = w / cWidth
	cellH = h / cHeight
	i = math.floor(spot / cWidth)
	j = spot - i * cWidth
	centerX = math.floor(cellW * j + w / (cWidth * 2))
	centerY = cellH * i + h / (cHeight * 2) - 1

	
	barWidth = math.floor(cellW / 2)
	barHeight = cellH - 6
	
	x = centerX - barWidth / 2
	y = centerY - barHeight / 2
	
	screen.setColor(255, 255, 255)
	screen.drawRect(x, y + 1, barWidth, barHeight)
	screen.drawRect(centerX - barWidth / 4, y, barWidth / 2, 1)
	
	padH = math.floor((barHeight - 5) / 4)
	padW = barWidth - 3
	
	pads = clamp(math.ceil(((value[2] - value[3]) / (value[4] - value[3])) * 4), 0, 4)
	if (pads &gt;= 3) then screen.setColor(20, 255, 20)
	elseif (pads == 2) then screen.setColor(255, 255, 20)
	else screen.setColor(255, 20, 20) end
	for i = 1, pads do
		screen.drawRectF(x + 2, y + barHeight - i * (padH + 1) + 1, padW, padH)
	end
end'>
					<pos x="2" y="2.75"/>
					<in1 component_id="56">
						<v 01="4" 02="0.000579" 04="100" 05="1" 08="100" 09="4" 10="1392.79834" 12="1400" 13="3" 14="1.999388" 16="2" 17="1"/>
					</in1>
					<in2 component_id="41" node_index="1">
						<v/>
					</in2>
					<out1>
						<v/>
					</out1>
					<out2>
						<v/>
					</out2>
				</object>
			</c>
			<c type="34">
				<object id="122" n="Width">
					<pos x="-2.5" y="6"/>
					<out1 v="1"/>
					<v text="2" value="2"/>
				</object>
			</c>
			<c type="34">
				<object id="123" n="Height">
					<pos x="-2.5" y="5.5"/>
					<out1 v="1"/>
					<v text="2" value="2"/>
				</object>
			</c>
			<c type="20">
				<object id="130" name="1st Property" v="4" i="4">
					<pos x="-2.5" y="4.5"/>
					<out1 v="4"/>
					<items>
						<i l="None">
							<v text="0"/>
						</i>
						<i l="Dial">
							<v text="1" value="1"/>
						</i>
						<i l="Delta">
							<v text="2" value="2"/>
						</i>
						<i l="Bat">
							<v text="3" value="3"/>
						</i>
						<i l="Bar">
							<v text="4" value="4"/>
						</i>
					</items>
				</object>
			</c>
			<c type="58">
				<object id="131" n="Name 1" v="M/S">
					<pos x="-2.5" y="3.5"/>
				</object>
			</c>
			<c type="34">
				<object id="132" n="Min">
					<pos x="-2.5" y="3"/>
					<out1/>
					<v text="0"/>
				</object>
			</c>
			<c type="34">
				<object id="133" n="Max">
					<pos x="-2.5" y="2.5"/>
					<out1 v="100"/>
					<v text="100" value="100"/>
				</object>
			</c>
			<c type="20">
				<object id="134" name="2nd Property" v="1" i="1">
					<pos x="-2.5" y="1.75"/>
					<out1 v="1"/>
					<items>
						<i l="None">
							<v text="0"/>
						</i>
						<i l="Dial">
							<v text="1" value="1"/>
						</i>
						<i l="Delta">
							<v text="2" value="2"/>
						</i>
						<i l="Bat">
							<v text="3" value="3"/>
						</i>
						<i l="Bar">
							<v text="4" value="4"/>
						</i>
					</items>
				</object>
			</c>
			<c type="58">
				<object id="135" n="Name 2" v="RPS">
					<pos x="-2.5" y="0.75"/>
				</object>
			</c>
			<c type="34">
				<object id="136" n="Min">
					<pos x="-2.5" y="0.25"/>
					<out1/>
					<v text="0"/>
				</object>
			</c>
			<c type="34">
				<object id="137" n="Max">
					<pos x="-2.5" y="-0.25"/>
					<out1 v="100"/>
					<v text="100" value="100"/>
				</object>
			</c>
			<c type="20">
				<object id="138" name="3rd Property" v="4" i="4">
					<pos x="-2.5" y="-1"/>
					<out1 v="4"/>
					<items>
						<i l="None">
							<v text="0"/>
						</i>
						<i l="Dial">
							<v text="1" value="1"/>
						</i>
						<i l="Delta">
							<v text="2" value="2"/>
						</i>
						<i l="Bat">
							<v text="3" value="3"/>
						</i>
						<i l="Bar">
							<v text="4" value="4"/>
						</i>
					</items>
				</object>
			</c>
			<c type="58">
				<object id="139" n="Name 3" v="FUEL">
					<pos x="-2.5" y="-2"/>
				</object>
			</c>
			<c type="34">
				<object id="140" n="Min">
					<pos x="-2.5" y="-2.5"/>
					<out1/>
					<v text="0"/>
				</object>
			</c>
			<c type="34">
				<object id="141" n="Max">
					<pos x="-2.5" y="-3"/>
					<out1 v="1400"/>
					<v text="1400" value="1400"/>
				</object>
			</c>
			<c type="20">
				<object id="142" name="4th Property" v="3" i="3">
					<pos x="-2.5" y="-3.75"/>
					<out1 v="3"/>
					<items>
						<i l="None">
							<v text="0"/>
						</i>
						<i l="Dial">
							<v text="1" value="1"/>
						</i>
						<i l="Delta">
							<v text="2" value="2"/>
						</i>
						<i l="Bat">
							<v text="3" value="3"/>
						</i>
						<i l="Bar">
							<v text="4" value="4"/>
						</i>
					</items>
				</object>
			</c>
			<c type="58">
				<object id="143" n="Name 4" v="Battery">
					<pos x="-2.5" y="-4.75"/>
				</object>
			</c>
			<c type="34">
				<object id="144" n="Min">
					<pos x="-2.5" y="-5.25"/>
					<out1/>
					<v text="0"/>
				</object>
			</c>
			<c type="34">
				<object id="145" n="Max">
					<pos x="-2.5" y="-5.75"/>
					<out1 v="2"/>
					<v text="2" value="2"/>
				</object>
			</c>
			<c type="56">
				<object id="146" script='function clamp(value, min, max)
	if (value &gt; max) then return max
	elseif (value &lt; min) then return min
	else return value end
end

types,values,lastValues,deltas={},{},{},{}

tickTime,seconds = 0,0

width,height=property.getNumber("Width"),property.getNumber("Height")

cWidth, cHeight, count = width, height, clamp(width * height, 1, 4)

for i = 1, count do
	types[i] = 0
	values[i] = {0}
	lastValues[i] = 0
	deltas[i] = 0
end

--type, value, name, min, max
function onTick()
	tickTime = tickTime + 1
	if (tickTime &gt;= 60) then
		tickTime = 0
		seconds = seconds + 1
		
		for i = 1, count do
			deltas[i] = values[i][2] - lastValues[i]
			lastValues[i] = values[i][2]
		end
	end
	
	fullscreen = input.getBool(1)
	iterator = input.getNumber(17)
	
	
	
	
	if (fullscreen) then gridSize = 1
	else gridSize = math.min(width, height) end
	

	for i = 1, count do
		index = (i-1) * 4 + 1
		types[i] = input.getNumber(index)
		values[i][1] = property.getText("Name " .. tostring(i))
		values[i][2] = input.getNumber(index + 1)
		values[i][3] = input.getNumber(index + 2)
		values[i][4] = input.getNumber(index + 3)
	end
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()

	if (not fullscreen) then 
		cWidth, cHeight = width, height
		for k, v in pairs(types) do
			if (v == 4) then
				drawBar(k, values[k])
			end
		end
	else
		cWidth, cHeight = 1, 1
		if (types[iterator] == 4) then
			drawDial(1, values[iterator])
		end
	end
end
	
function drawBar(spot, value)
	spot = spot - 1
	cellW = w / cWidth
	cellH = h / cHeight
	i = math.floor(spot / cWidth)
	j = spot - i * cWidth
	centerX = math.floor(cellW * j + w / (cWidth * 2))
	centerY = cellH * i + h / (cHeight * 2) - 1
	
	barWidth = math.floor(cellW / 2)
	barHeight = cellH - 5
	
	x = centerX - barWidth / 2
	y = centerY - barHeight / 2
	
	screen.setColor(255, 255, 255)
	screen.drawRect(x, y, barWidth, barHeight)
	
	perc = clamp((value[2] - value[3]) / (value[4] - value[3]), 0, 1)
	screen.setColor(clamp(255 * (1 - perc), 20, 255), 255 * perc, 20)
	empty = barHeight * (1 - perc)
	screen.drawRectF(x + 1, y + 2 + empty, barWidth - 1, clamp(barHeight - empty - 1, 0, barHeight))
	
	screen.setColor(255, 255, 255)
	screen.drawRectF(x + 1, y + barHeight * 0.75 + 2, barWidth * 0.5, 1)
	screen.drawRectF(x + 1, y + barHeight * 0.50 + 2, barWidth * 0.75, 1)
	screen.drawRectF(x + 1, y + barHeight * 0.25 + 2, barWidth * 0.5, 1)
end'>
					<pos x="3.5" y="2.75"/>
					<in1 component_id="56">
						<v 01="4" 02="0.000579" 04="100" 05="1" 08="100" 09="4" 10="1392.79834" 12="1400" 13="3" 14="1.999388" 16="2" 17="1"/>
					</in1>
					<in2 component_id="117" node_index="1">
						<v/>
					</in2>
					<out1>
						<v/>
					</out1>
					<out2>
						<v/>
					</out2>
				</object>
			</c>
			<c type="43">
				<object id="148" l="value">
					<pos x="3.5" y="0.5"/>
					<in1 component_id="12" v="0.000594"/>
					<in2/>
				</object>
			</c>
		</components>
		<components_bridge>
			<c type="2">
				<object id="12">
					<pos x="-2.5" y="4"/>
					<in1 v="0.000594"/>
					<out1 v="0.000594"/>
				</object>
			</c>
			<c type="2">
				<object id="15">
					<pos x="-2.5" y="1.25"/>
					<in1/>
					<out1/>
				</object>
			</c>
			<c type="2">
				<object id="16">
					<pos x="-2.5" y="-1.5"/>
					<in1 v="1392.79834"/>
					<out1 v="1392.79834"/>
				</object>
			</c>
			<c type="2">
				<object id="92">
					<pos x="-2.5" y="-4.25"/>
					<in1 v="1.999388"/>
					<out1 v="1.999388"/>
				</object>
			</c>
			<c type="4">
				<object id="94">
					<pos x="-1" y="4.5"/>
					<in1>
						<v 01="96" 02="32"/>
					</in1>
					<out1>
						<v 01="96" 02="32"/>
					</out1>
				</object>
			</c>
			<c type="7">
				<object id="96">
					<pos x="5" y="2.75"/>
					<in1 component_id="146" node_index="1">
						<v/>
					</in1>
					<out1>
						<v/>
					</out1>
				</object>
			</c>
		</components_bridge>
		<groups/>
		<component_states>
			<c0 id="41" script='mode = false
lastPressed = false
fullscreen = false
gridSize = 2
iterator = 1

width = property.getNumber("Width")
height = property.getNumber("Height")

count = width * height

function onTick()
	isPressed = input.getBool(1)
	w = input.getNumber(1)
	h = input.getNumber(2)
	inputX = input.getNumber(3)
	inputY = input.getNumber(4)
	
	if (fullscreen and isPressed and not lastPressed) then
		back = isPointInRectangle(inputX, inputY, 0, 0, w/2, h/2)
		forward = isPointInRectangle(inputX, inputY, w/2, 0, w/2, h/2)
		mode = isPointInRectangle(inputX, inputY, 0, h/2, w, h/2)
	elseif (not fullscreen and isPressed and not lastPressed) then
		mode = true
	else
		mode = false
		back = false
		forward = false
	end
	
	if (mode and fullscreen) then
		fullscreen = false
		gridSize = math.min(width, height)
	elseif (mode and not fullscreen) then
		fullscreen = true
		gridSize = 1
	end
	
	if (forward) then iterator = iterator + 1
	elseif (back) then iterator = iterator - 1 end
	
	if (iterator &gt; count) then iterator = 1
	elseif (iterator &lt; 1) then iterator = count end
	
	lastPressed = isPressed
	
	output.setBool(1, fullscreen)
	output.setNumber(17, iterator)
end

function onDraw()
	if (not fullscreen) then
		drawGrid(width, height)
	else
		drawGrid(1, 1)
	end
end

function drawGrid(width, height)
	screen.setColor(10, 10, 10)
	w, h = screen.getWidth(), screen.getHeight()
	
	for i = 1, height do
		for j = 1, width do
			screen.drawRect(w/width * (j - 1), h/height * (i - 1), w/width - 1, h/height - 1)
		end
	end
end
	
function isPointInRectangle(x, y, rectX, rectY, rectW, rectH)
	return x &gt; rectX and y &gt; rectY and x &lt; rectX+rectW and y &lt; rectY+rectH
end'>
				<pos y="2.75"/>
				<in1 component_id="94">
					<v 01="96" 02="32"/>
				</in1>
				<in2>
					<v/>
				</in2>
				<out1>
					<v 17="1"/>
				</out1>
				<out2>
					<v/>
				</out2>
			</c0>
			<c1 id="56" count="16">
				<pos x="1" y="-2.5"/>
				<inc component_id="41">
					<v 17="1"/>
				</inc>
				<in1 component_id="130" v="4"/>
				<in2 component_id="12" v="0.000594"/>
				<in3 component_id="132"/>
				<in4 component_id="133" v="100"/>
				<in5 component_id="134" v="1"/>
				<in6 component_id="15"/>
				<in7 component_id="136"/>
				<in8 component_id="137" v="100"/>
				<in9 component_id="138" v="4"/>
				<in10 component_id="16" v="1392.79834"/>
				<in11 component_id="140"/>
				<in12 component_id="141" v="1400"/>
				<in13 component_id="142" v="3"/>
				<in14 component_id="92" v="1.999388"/>
				<in15 component_id="144"/>
				<in16 component_id="145" v="2"/>
				<out1>
					<v 01="4" 02="0.000594" 04="100" 05="1" 08="100" 09="4" 10="1392.79834" 12="1400" 13="3" 14="1.999388" 16="2" 17="1"/>
				</out1>
			</c1>
			<c2 id="117" script='function clamp(value, min, max)
	if (value &gt; max) then return max
	elseif (value &lt; min) then return min
	else return value end
end

types,values,lastValues,deltas={},{},{},{}

tickTime = 0

width,height=property.getNumber("Width"),property.getNumber("Height")

cWidth, cHeight, count = width, height, clamp(width * height, 1, 4)

for i = 1, count do
	types[i] = 0
	values[i] = {0}
	lastValues[i] = 0
	deltas[i] = 0
end

--type, value, name, min, max
function onTick()
	tickTime = tickTime + 1
	if (tickTime &gt;= 60) then
		tickTime = 0
		
		for i = 1, count do
			deltas[i] = values[i][2] - lastValues[i]
			lastValues[i] = values[i][2]
		end
	end
	
	fullscreen = input.getBool(1)
	iterator = input.getNumber(17)
	
	
	
	
	if (fullscreen) then gridSize = 1
	else gridSize = math.min(width, height) end
	

	for i = 1, count do
		index = (i-1) * 4 + 1
		types[i] = input.getNumber(index)
		values[i][1] = property.getText("Name " .. tostring(i))
		values[i][2] = input.getNumber(index + 1)
		values[i][3] = input.getNumber(index + 2)
		values[i][4] = input.getNumber(index + 3)
	end
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()

	if (not fullscreen) then 
		cWidth, cHeight = width, height
		for k, v in pairs(types) do
			if (v == 1) then
				drawDial(k, values[k])
			elseif (v == 2) then 
				drawDelta(k, values[k], deltas[k])
			elseif (v == 3) then
				drawBat(k, values[k])
			end
		end
	else
		cWidth, cHeight = 1, 1
		if (types[iterator] == 1) then
			drawDial(1, values[iterator])
		elseif (types[iterator] == 2) then
			drawDelta(1, values[iterator], deltas[iterator])
		elseif (types[iterator] == 3) then
			drawBat(1, values[iterator])
		end
	end
	
end
	
function drawDial(spot, value)
	spot = spot - 1
	i = math.floor(spot / cWidth)
	j = spot - i * cWidth
	
	centerX = (w/cWidth) * j + w / (cWidth * 2)
	centerY = (h/cHeight) * i + h / (cHeight * 2) - 1
	degrees = ((value[2] - value[3]) / (value[4] - value[3]) * 270) + 135
	cellW = w / cWidth
	cellH = h / cHeight
	radius = math.min(cellW, cellH) / 2 - 1.5
	
	lineX = centerX + (radius - 1) * math.cos(math.rad(degrees))
	lineY = centerY + (radius - 1) * math.sin(math.rad(degrees))
	
	screen.setColor(50, 50, 50)
	screen.drawCircle(centerX, centerY, radius)
	
	screen.setColor(0, 255, 255)
	screen.drawTextBox(centerX - cellW / 2 + 1, centerY - cellH / 2 + 4, cellW, cellH, value[1], 0, -1)
	
	screen.setColor(0, 0, 0)
	length = math.floor(0.7 * radius)
	screen.drawRectF(centerX - length, centerY + radius / 2, length * 2 + 1, cellH - (centerY + radius / 2) - i * cellH - 1)
	
	screen.setColor(255, 0, 0)
	screen.drawLine(centerX, centerY, lineX, lineY)
end
	
function drawDelta(spot, value, delta)
	spot = spot - 1
	cellW = w / cWidth
	cellH = h / cHeight
	i = math.floor(spot / cWidth)
	j = spot - i * cWidth
	x = j * cellW + 1
	y = i * cellH + 1
	
	screen.setColor(255, 255, 255)
	screen.drawTextBox(x, y + cellH / 2, cellW + 2, cellH / 2, string.format("%.2f", delta), 0, -1)
	screen.setColor(0, 255, 255)
	screen.drawTextBox(x, y - 6, cellW, cellH, value[1], 0, 0)
end
	
function drawBat(spot, value)
	spot = spot - 1
	cellW = w / cWidth
	cellH = h / cHeight
	i = math.floor(spot / cWidth)
	j = spot - i * cWidth
	centerX = math.floor(cellW * j + w / (cWidth * 2))
	centerY = cellH * i + h / (cHeight * 2) - 1

	
	barWidth = math.floor(cellW / 2)
	barHeight = cellH - 6
	
	x = centerX - barWidth / 2
	y = centerY - barHeight / 2
	
	screen.setColor(255, 255, 255)
	screen.drawRect(x, y + 1, barWidth, barHeight)
	screen.drawRect(centerX - barWidth / 4, y, barWidth / 2, 1)
	
	padH = math.floor((barHeight - 5) / 4)
	padW = barWidth - 3
	
	pads = clamp(math.ceil(((value[2] - value[3]) / (value[4] - value[3])) * 4), 0, 4)
	if (pads &gt;= 3) then screen.setColor(20, 255, 20)
	elseif (pads == 2) then screen.setColor(255, 255, 20)
	else screen.setColor(255, 20, 20) end
	for i = 1, pads do
		screen.drawRectF(x + 2, y + barHeight - i * (padH + 1) + 1, padW, padH)
	end
end'>
				<pos x="2" y="2.75"/>
				<in1 component_id="56">
					<v 01="4" 02="0.000579" 04="100" 05="1" 08="100" 09="4" 10="1392.79834" 12="1400" 13="3" 14="1.999388" 16="2" 17="1"/>
				</in1>
				<in2 component_id="41" node_index="1">
					<v/>
				</in2>
				<out1>
					<v/>
				</out1>
				<out2>
					<v/>
				</out2>
			</c2>
			<c3 id="122" n="Width">
				<pos x="-2.5" y="6"/>
				<out1 v="1"/>
				<v text="2" value="2"/>
			</c3>
			<c4 id="123" n="Height">
				<pos x="-2.5" y="5.5"/>
				<out1 v="1"/>
				<v text="2" value="2"/>
			</c4>
			<c5 id="130" name="1st Property" v="4" i="4">
				<pos x="-2.5" y="4.5"/>
				<out1 v="4"/>
				<items>
					<i l="None">
						<v text="0"/>
					</i>
					<i l="Dial">
						<v text="1" value="1"/>
					</i>
					<i l="Delta">
						<v text="2" value="2"/>
					</i>
					<i l="Bat">
						<v text="3" value="3"/>
					</i>
					<i l="Bar">
						<v text="4" value="4"/>
					</i>
				</items>
			</c5>
			<c6 id="131" n="Name 1" v="M/S">
				<pos x="-2.5" y="3.5"/>
			</c6>
			<c7 id="132" n="Min">
				<pos x="-2.5" y="3"/>
				<out1/>
				<v text="0"/>
			</c7>
			<c8 id="133" n="Max">
				<pos x="-2.5" y="2.5"/>
				<out1 v="100"/>
				<v text="100" value="100"/>
			</c8>
			<c9 id="134" name="2nd Property" v="1" i="1">
				<pos x="-2.5" y="1.75"/>
				<out1 v="1"/>
				<items>
					<i l="None">
						<v text="0"/>
					</i>
					<i l="Dial">
						<v text="1" value="1"/>
					</i>
					<i l="Delta">
						<v text="2" value="2"/>
					</i>
					<i l="Bat">
						<v text="3" value="3"/>
					</i>
					<i l="Bar">
						<v text="4" value="4"/>
					</i>
				</items>
			</c9>
			<c10 id="135" n="Name 2" v="RPS">
				<pos x="-2.5" y="0.75"/>
			</c10>
			<c11 id="136" n="Min">
				<pos x="-2.5" y="0.25"/>
				<out1/>
				<v text="0"/>
			</c11>
			<c12 id="137" n="Max">
				<pos x="-2.5" y="-0.25"/>
				<out1 v="100"/>
				<v text="100" value="100"/>
			</c12>
			<c13 id="138" name="3rd Property" v="4" i="4">
				<pos x="-2.5" y="-1"/>
				<out1 v="4"/>
				<items>
					<i l="None">
						<v text="0"/>
					</i>
					<i l="Dial">
						<v text="1" value="1"/>
					</i>
					<i l="Delta">
						<v text="2" value="2"/>
					</i>
					<i l="Bat">
						<v text="3" value="3"/>
					</i>
					<i l="Bar">
						<v text="4" value="4"/>
					</i>
				</items>
			</c13>
			<c14 id="139" n="Name 3" v="FUEL">
				<pos x="-2.5" y="-2"/>
			</c14>
			<c15 id="140" n="Min">
				<pos x="-2.5" y="-2.5"/>
				<out1/>
				<v text="0"/>
			</c15>
			<c16 id="141" n="Max">
				<pos x="-2.5" y="-3"/>
				<out1 v="1400"/>
				<v text="1400" value="1400"/>
			</c16>
			<c17 id="142" name="4th Property" v="3" i="3">
				<pos x="-2.5" y="-3.75"/>
				<out1 v="3"/>
				<items>
					<i l="None">
						<v text="0"/>
					</i>
					<i l="Dial">
						<v text="1" value="1"/>
					</i>
					<i l="Delta">
						<v text="2" value="2"/>
					</i>
					<i l="Bat">
						<v text="3" value="3"/>
					</i>
					<i l="Bar">
						<v text="4" value="4"/>
					</i>
				</items>
			</c17>
			<c18 id="143" n="Name 4" v="Battery">
				<pos x="-2.5" y="-4.75"/>
			</c18>
			<c19 id="144" n="Min">
				<pos x="-2.5" y="-5.25"/>
				<out1/>
				<v text="0"/>
			</c19>
			<c20 id="145" n="Max">
				<pos x="-2.5" y="-5.75"/>
				<out1 v="2"/>
				<v text="2" value="2"/>
			</c20>
			<c21 id="146" script='function clamp(value, min, max)
	if (value &gt; max) then return max
	elseif (value &lt; min) then return min
	else return value end
end

types,values,lastValues,deltas={},{},{},{}

tickTime,seconds = 0,0

width,height=property.getNumber("Width"),property.getNumber("Height")

cWidth, cHeight, count = width, height, clamp(width * height, 1, 4)

for i = 1, count do
	types[i] = 0
	values[i] = {0}
	lastValues[i] = 0
	deltas[i] = 0
end

--type, value, name, min, max
function onTick()
	tickTime = tickTime + 1
	if (tickTime &gt;= 60) then
		tickTime = 0
		seconds = seconds + 1
		
		for i = 1, count do
			deltas[i] = values[i][2] - lastValues[i]
			lastValues[i] = values[i][2]
		end
	end
	
	fullscreen = input.getBool(1)
	iterator = input.getNumber(17)
	
	
	
	
	if (fullscreen) then gridSize = 1
	else gridSize = math.min(width, height) end
	

	for i = 1, count do
		index = (i-1) * 4 + 1
		types[i] = input.getNumber(index)
		values[i][1] = property.getText("Name " .. tostring(i))
		values[i][2] = input.getNumber(index + 1)
		values[i][3] = input.getNumber(index + 2)
		values[i][4] = input.getNumber(index + 3)
	end
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()

	if (not fullscreen) then 
		cWidth, cHeight = width, height
		for k, v in pairs(types) do
			if (v == 4) then
				drawBar(k, values[k])
			end
		end
	else
		cWidth, cHeight = 1, 1
		if (types[iterator] == 4) then
			drawDial(1, values[iterator])
		end
	end
end
	
function drawBar(spot, value)
	spot = spot - 1
	cellW = w / cWidth
	cellH = h / cHeight
	i = math.floor(spot / cWidth)
	j = spot - i * cWidth
	centerX = math.floor(cellW * j + w / (cWidth * 2))
	centerY = cellH * i + h / (cHeight * 2) - 1
	
	barWidth = math.floor(cellW / 2)
	barHeight = cellH - 5
	
	x = centerX - barWidth / 2
	y = centerY - barHeight / 2
	
	screen.setColor(255, 255, 255)
	screen.drawRect(x, y, barWidth, barHeight)
	
	perc = clamp((value[2] - value[3]) / (value[4] - value[3]), 0, 1)
	screen.setColor(clamp(255 * (1 - perc), 20, 255), 255 * perc, 20)
	empty = barHeight * (1 - perc)
	screen.drawRectF(x + 1, y + 2 + empty, barWidth - 1, clamp(barHeight - empty - 1, 0, barHeight))
	
	screen.setColor(255, 255, 255)
	screen.drawRectF(x + 1, y + barHeight * 0.75 + 2, barWidth * 0.5, 1)
	screen.drawRectF(x + 1, y + barHeight * 0.50 + 2, barWidth * 0.75, 1)
	screen.drawRectF(x + 1, y + barHeight * 0.25 + 2, barWidth * 0.5, 1)
end'>
				<pos x="3.5" y="2.75"/>
				<in1 component_id="56">
					<v 01="4" 02="0.000579" 04="100" 05="1" 08="100" 09="4" 10="1392.79834" 12="1400" 13="3" 14="1.999388" 16="2" 17="1"/>
				</in1>
				<in2 component_id="117" node_index="1">
					<v/>
				</in2>
				<out1>
					<v/>
				</out1>
				<out2>
					<v/>
				</out2>
			</c21>
			<c22 id="148" l="value">
				<pos x="3.5" y="0.5"/>
				<in1 component_id="12" v="0.000594"/>
				<in2/>
			</c22>
		</component_states>
		<component_bridge_states>
			<c0 id="12">
				<pos x="-2.5" y="4"/>
				<in1 v="0.000594"/>
				<out1 v="0.000594"/>
			</c0>
			<c1 id="15">
				<pos x="-2.5" y="1.25"/>
				<in1/>
				<out1/>
			</c1>
			<c2 id="16">
				<pos x="-2.5" y="-1.5"/>
				<in1 v="1392.79834"/>
				<out1 v="1392.79834"/>
			</c2>
			<c3 id="92">
				<pos x="-2.5" y="-4.25"/>
				<in1 v="1.999388"/>
				<out1 v="1.999388"/>
			</c3>
			<c4 id="94">
				<pos x="-1" y="4.5"/>
				<in1>
					<v 01="96" 02="32"/>
				</in1>
				<out1>
					<v 01="96" 02="32"/>
				</out1>
			</c4>
			<c5 id="96">
				<pos x="5" y="2.75"/>
				<in1 component_id="146" node_index="1">
					<v/>
				</in1>
				<out1>
					<v/>
				</out1>
			</c5>
		</component_bridge_states>
		<group_states/>
	</group>
</microprocessor>

