<?xml version="1.0" encoding="UTF-8"?>
<microprocessor name="Map &amp; Autopilot" description="Microcontroller" width="3" length="4" id_counter="80" id_counter_node="13" sym0="32752" sym1="32808" sym2="32836" sym3="65508" sym4="24580" sym5="8232" sym6="8200" sym7="8840" sym8="18440" sym9="16400" sym10="20496" sym11="17758" sym12="16529" sym13="16721" sym14="8202" sym15="8188">
	<nodes>
		<n id="1" component_id="3">
			<node label="Monitor" type="6" description="The input signal to be processed.">
				<position x="1" z="1"/>
			</node>
		</n>
		<n id="2" component_id="8">
			<node label="GPS X" mode="1" type="1" description="The input signal to be processed."/>
		</n>
		<n id="3" component_id="9">
			<node label="GPS Y" mode="1" type="1" description="The input signal to be processed.">
				<position x="1"/>
			</node>
		</n>
		<n id="5" component_id="13">
			<node label="Compass Bearing" mode="1" type="1" description="The input signal to be processed.">
				<position x="2"/>
			</node>
		</n>
		<n id="6" component_id="16">
			<node label="Touch input" mode="1" type="5" description="The input signal to be processed.">
				<position z="1"/>
			</node>
		</n>
		<n id="7" component_id="38">
			<node label="Touch Pulse" description="The input signal to be processed.">
				<position x="2" z="1"/>
			</node>
		</n>
		<n id="9" component_id="54">
			<node label="Keypad A" mode="1" type="1" description="The input signal to be processed.">
				<position z="2"/>
			</node>
		</n>
		<n id="10" component_id="55">
			<node label="Keypad B" mode="1" type="1" description="The input signal to be processed.">
				<position x="1" z="2"/>
			</node>
		</n>
		<n id="11" component_id="53">
			<node label="Keypad Pulse" mode="1" description="The input signal to be processed.">
				<position x="2" z="2"/>
			</node>
		</n>
		<n id="12" component_id="65">
			<node label="Rudders" type="1" description="The input signal to be processed.">
				<position x="1" z="3"/>
			</node>
		</n>
		<n id="13" component_id="67">
			<node label="On Route" description="The input signal to be processed.">
				<position z="3"/>
			</node>
		</n>
	</nodes>
	<group>
		<data>
			<inputs/>
			<outputs/>
		</data>
		<components>
			<c type="56">
				<object id="4" script='waypoints = {}
counter = 0
currentC = 0
lastPulse = false

function onTick()
	reset = input.getBool(3)
	pulse = input.getBool(4)

	w = input.getNumber(1)
	h = input.getNumber(2)
	
	zoom = input.getNumber(7)
	output.setNumber(1, zoom)
	x = input.getNumber(8)
	y = input.getNumber(9)
	bearing = input.getNumber(10)
	newX = input.getNumber(11)
	newY = input.getNumber(12)
	currentC = input.getNumber(13)
	
	if (currentC == counter) then reset = true end
	
	if (reset) then
		waypoints = {}
		counter = 0
	end
	
	if (pulse and not lastPulse) then
		
		waypoints[counter * 2 + 1] = newX
		waypoints[counter * 2 + 2] = newY
		
		counter = counter + 1
	end
	
	
	
	lastPulse = pulse
end

function onDraw()
			
	w = screen.getWidth()
	h = screen.getHeight()	
	
	if (w&lt;h) then
		size = w * 0.04
	else
		size = h * 0.04
	end
	
	screen.drawMap(x, y, zoom)
	
	firstX, firstY = map.mapToScreen(x, y, zoom, w, h, x, y)
	
	for i = currentC, counter - 1 do
		secondX, secondY = map.mapToScreen(x, y, zoom, w, h, waypoints[i * 2 + 1], waypoints[i * 2 + 2])
		radius = cramp(0, 1, (1 - zoom / 10)) * size
		
		screen.setColor(255, 165, 0, 255)
		screen.drawLine(firstX, firstY, secondX, secondY)
		
		screen.setColor(0, 0, 0, 240)
		screen.drawCircleF(secondX, secondY, radius)
		
		screen.setColor(0, 0, 0, 255)
		screen.drawText(secondX + radius, secondY + radius, string.format("%.0f", i + 1))
		
		firstX = secondX
		firstY = secondY
	end
	
	
	screen.setColor(200, 0, 0, 128)
	drawCurrentPosition(w, h)
	
	screen.setColor(220, 0, 0, 255)
	screen.drawRectF(findRectCenterX(w, 2), findRectCenterY(h, 2), 2, 2)
end
	
function drawCurrentPosition(w, h)
	if (w&lt;h) then
		radius = w * 0.09
	else
		radius = h * 0.09
	end
	cx = w/2
	cy = h/2
	compassDegrees = bearing * -360 % 360
	translatedBearing = compassDegrees + 90
	rad1 = math.rad(translatedBearing)
	rad2 = math.rad(translatedBearing + 140)
	rad3 = math.rad(translatedBearing + 220)
	x1 = cx - radius * math.cos(rad1)
	y1 = cy - radius * math.sin(rad1)
	x2 = cx - radius * math.cos(rad2)
	y2 = cy - radius * math.sin(rad2)
	x3 = cx - radius * math.cos(rad3)
	y3 = cy - radius * math.sin(rad3)
	screen.drawTriangleF(x1, y1, x2, y2, x3, y3)
end
	
function findRectCenterX(w, rectW)
	return w/2 - (rectW / 2)
end
	
function findRectCenterY(h, rectH)
	return h/2 - (rectH / 2)
end
	
function cramp(min, max, value)
	if (value &lt; min) then return min
	elseif (value &gt; max) then return max
	else return value end
end'>
					<pos x="-1"/>
					<in1 component_id="11">
						<v 01="160" 02="96" 03="15" 04="95" 07="1" 08="-1206.113037" 09="-15285.206055" 10="0.246914" 11="-1193.72998" 12="-15247.69043"/>
					</in1>
					<in2>
						<v/>
					</in2>
					<out1>
						<v 01="1"/>
					</out1>
					<out2>
						<v/>
					</out2>
				</object>
			</c>
			<c type="40">
				<object id="11" count="7" offset="6">
					<pos x="-2" y="0.5"/>
					<inc component_id="76">
						<v 01="160" 02="96" 03="15" 04="95"/>
					</inc>
					<in1 component_id="49" v="1"/>
					<in2 component_id="8" v="-1206.119873"/>
					<in3 component_id="9" v="-15285.206055"/>
					<in4 component_id="13" v="0.246898"/>
					<in5 component_id="72" v="-1193.72998"/>
					<in6 component_id="73" v="-15247.69043"/>
					<in7 component_id="70"/>
					<out1>
						<v 01="160" 02="96" 03="15" 04="95" 07="1" 08="-1206.119873" 09="-15285.206055" 10="0.246898" 11="-1193.72998" 12="-15247.69043"/>
					</out1>
				</object>
			</c>
			<c type="29">
				<object id="17">
					<pos x="2" y="4.5"/>
					<in1 component_id="29">
						<v 01="1"/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="56">
				<object id="29" script='white = {255, 255, 255, 128}
black = {0, 0, 0, 128}
green = {0, 200, 0, 128}
red = {200, 0, 0, 128}
blue = {50, 50, 200, 128}
yellow = {255, 203, 80, 128}

zoom = 1
--anchor example(x, y). Range[0;1]
firstRow = {0, 0}
lastRow = {0, 1}

--1. Add button(width, height, color, text, textColor, anchor, offsetX, offsetY)
zoomInButton = {7, 7, black, "+", white, lastRow, 0, 0}
zoomOutButton = {7, 7, black, "-", white, lastRow, 7, 0}
startButton = {7, 7, black, "S", green, lastRow, 14, 0}
resetButton = {7, 7, black, "R", red, lastRow, 21, 0}



function onTick()
	w = input.getNumber(1)
	h = input.getNumber(2)
	inputX = input.getNumber(3)
	inputY = input.getNumber(4)
	bearing = input.getNumber(5)
	waypointsCounter = input.getNumber(6)
	currentWaypointsCounter = input.getNumber(7)
	totalDistance = input.getNumber(8) / 1000
	
	compassDegrees = bearing * -360 % 360
	bearingButton = {17, 7, black, string.format("%.0f", compassDegrees), red, firstRow, 0, 0}
	
	waypointsCounterButton = {17, 7, black, string.format("%.0f", currentWaypointsCounter) .. "/" .. string.format("%0.f", waypointsCounter), blue, firstRow, 17, 0}
	
	totalDistanceButton = {22, 7, black, string.format("%.1f", totalDistance), yellow, firstRow, 34, 0}
	
	isPressed = input.getBool(1)
	
	--2. Check if it&apos;s pressed
	currentButton = zoomInButton
	zoomingIn = isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)
	
	currentButton = zoomOutButton
	zoomingOut = isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)
	
	currentButton = startButton
	starting = isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)
	
	currentButton = resetButton
	resetting = isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)

	--3. Perform an action if it&apos;s pressed
	if (zoomingOut and zoom &lt; 50) then 
		zoom = zoom + zoom * 0.05
		output.setBool(1, true)
	elseif (zoomingIn and zoom &gt; 0.1) then
		zoom = zoom - zoom * 0.05 
		output.setBool(1, true)
	elseif (starting) then
		output.setBool(1, true)
		output.setBool(2, true)
	elseif (resetting) then 
		output.setBool(1, true)
		output.setBool(3, true)
	else
		output.setBool(1, false)
		output.setBool(2, false)
		output.setBool(3, false)
	end
	
	output.setNumber(1, zoom)
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()					
	
	--4. Draw the button
	drawButton(zoomInButton)
	drawButton(zoomOutButton)
	drawButton(startButton)
	drawButton(resetButton)
	drawButton(bearingButton)
	drawButton(waypointsCounterButton)
	drawButton(totalDistanceButton)
end


function unpack(pack)
	return table.unpack(pack)
end

function isPointInRectangle(x, y, w, h, button)
	rectX = button[6][1] * (w - button[1]) + button[7]
	rectY = button[6][2] * (h - button[2]) + button[8]
	rectW = button[1]
	rectH = button[2]
	return x &gt; rectX and y &gt; rectY and x &lt; rectX+rectW and y &lt; rectY+rectH
end

function drawButton(button)
	x = button[6][1] * (w - button[1]) + button[7]
	y = button[6][2] * (h - button[2]) + button[8]
	width = button[1]
	height = button[2]
	
	screen.setColor(unpack(button[3]))
	screen.drawRectF(x, y, width, height)
	
	frameColor = {button[3][1] * 0.8, button[3][2] * 0.8, button[3][3] * 0.8, 255}
	screen.setColor(unpack(frameColor))
	screen.drawRect(x, y, width, height)
	
	screen.setColor(unpack(button[5]))
	screen.drawTextBox(x, y, width, height, button[4], 1, 1)
end'>
					<pos x="1"/>
					<in1 component_id="61">
						<v 01="160" 02="96" 03="15" 04="95" 05="0.246914"/>
					</in1>
					<in2 component_id="4" node_index="1">
						<v/>
					</in2>
					<out1>
						<v 01="1"/>
					</out1>
					<out2>
						<v/>
					</out2>
				</object>
			</c>
			<c type="31">
				<object id="49">
					<pos x="2" y="4"/>
					<in1 component_id="29">
						<v 01="1"/>
					</in1>
					<out1 v="1"/>
				</object>
			</c>
			<c type="56">
				<object id="56" script="safezone = 10

waypoints = {}
counter = 0
currentC = 0

onRoute = false

lastPulse = false

function onTick()
	start = input.getBool(2)
	reset = input.getBool(3)
	pulse = input.getBool(4)
	
	currentX = input.getNumber(4)
	currentY = input.getNumber(5)
	compass = input.getNumber(6)
	bearing = compass * -360 % 360
	
	if (pulse and not lastPulse) then
		x = input.getNumber(2)
		y = input.getNumber(3)
		
		output.setNumber(1, x)
		output.setNumber(2, y)
		
		waypoints[counter * 2 + 1] = x
		waypoints[counter * 2 + 2] = y
		counter = counter + 1
	end
	
	if (start and counter &gt; 0) then onRoute = true end
	
	if (reset) then
		waypoints = {}
		counter = 0
		currentC = 0
		onRoute = false
		rudders = 0
	end
	
	
	if (onRoute and currentC ~= counter) then
		angle = math.atan(waypoints[currentC * 2 + 2] - currentY, waypoints[currentC * 2 + 1] - currentX) * (180 / math.pi) - 90
		
		--adjust the angle calculation
		if (angle &lt; 0) then angle = angle * -1
		elseif (angle &gt; 0) then angle = angle + 270 end
		
		--determine to which side to turn
		right = angle - bearing
		if (right &lt; 0) then right = right + 360 end
		left = 360 - right
		
		--turn rudders
		if (left &lt; right) then
			if (left &lt; safezone) then rudders = -left / safezone
			else rudders = -1 end
		elseif (left &gt; right) then
			if (right &lt; safezone) then rudders = right / safezone
			else rudders = 1 end
		else rudders = 0 end
		
		--determine when the checkpoint is reached
		distance = calculateDistance(currentX, currentY, waypoints[currentC * 2 + 1], waypoints[currentC * 2 + 2])
		if (distance &lt; 15) then currentC = currentC + 1 end
	elseif (onRoute and currentC == counter) then
		waypoints = {}
		counter = 0
		currentC = 0
		onRoute = false
		rudders = 0
	end
	
	totalDistance = 0
	firstX, firstY = currentX, currentY
	
	for i = currentC, counter - 1 do
		secondX, secondY = waypoints[i * 2 + 1], waypoints[i * 2 + 2]
		totalDistance = totalDistance + calculateDistance(firstX, firstY, secondX, secondY)
	end
	
	output.setBool(1, onRoute)
	output.setBool(2, reset)
	output.setBool(3, pulse)
	
	output.setNumber(3, rudders)
	output.setNumber(4, counter)
	output.setNumber(5, currentC)
	output.setNumber(6, totalDistance)
	
	lastPulse = pulse
end
	
function calculateDistance(x1, y1, x2, y2)
	return math.sqrt((x1 - x2)^2 + (y1 - y2)^2)
end">
					<pos x="4"/>
					<in1 component_id="57">
						<v 01="1" 02="-1193.72998" 03="-15247.69043" 04="-1206.113037" 05="-15285.206055" 06="0.246914"/>
					</in1>
					<in2 component_id="29" node_index="1">
						<v/>
					</in2>
					<out1>
						<v 01="-1193.72998" 02="-15247.69043"/>
					</out1>
					<out2>
						<v/>
					</out2>
				</object>
			</c>
			<c type="40">
				<object id="57" count="5" offset="1">
					<pos x="3" y="-4"/>
					<inc component_id="60">
						<v 01="1"/>
					</inc>
					<in1 component_id="54" v="-1193.72998"/>
					<in2 component_id="55" v="-15247.69043"/>
					<in3 component_id="8" v="-1206.119873"/>
					<in4 component_id="9" v="-15285.206055"/>
					<in5 component_id="13" v="0.246898"/>
					<out1>
						<v 01="1" 02="-1193.72998" 03="-15247.69043" 04="-1206.119873" 05="-15285.206055" 06="0.246898"/>
					</out1>
				</object>
			</c>
			<c type="41">
				<object id="60" count="1" offset="3">
					<pos x="2" y="-1.5"/>
					<inc component_id="29">
						<v 01="1"/>
					</inc>
					<in1 component_id="53"/>
					<out1>
						<v 01="1"/>
					</out1>
				</object>
			</c>
			<c type="40">
				<object id="61" count="4" offset="4">
					<pos x="0.5" y="1.5"/>
					<inc component_id="16">
						<v 01="160" 02="96" 03="15" 04="95"/>
					</inc>
					<in1 component_id="13" v="0.246898"/>
					<in2 component_id="69"/>
					<in3 component_id="70"/>
					<in4 component_id="80"/>
					<out1>
						<v 01="160" 02="96" 03="15" 04="95" 05="0.246898"/>
					</out1>
				</object>
			</c>
			<c type="31">
				<object id="62" i="2">
					<pos x="5" y="2.5"/>
					<in1 component_id="56">
						<v 01="-1193.72998" 02="-15247.69043"/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="29">
				<object id="68">
					<pos x="5" y="5"/>
					<in1 component_id="56">
						<v 01="-1193.72998" 02="-15247.69043"/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="31">
				<object id="69" i="3">
					<pos x="5" y="2"/>
					<in1 component_id="56">
						<v 01="-1193.72998" 02="-15247.69043"/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="31">
				<object id="70" i="4">
					<pos x="5" y="1.5"/>
					<in1 component_id="56">
						<v 01="-1193.72998" 02="-15247.69043"/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="31">
				<object id="72">
					<pos x="5" y="3.5"/>
					<in1 component_id="56">
						<v 01="-1193.72998" 02="-15247.69043"/>
					</in1>
					<out1 v="-1193.72998"/>
				</object>
			</c>
			<c type="31">
				<object id="73" i="1">
					<pos x="5" y="3"/>
					<in1 component_id="56">
						<v 01="-1193.72998" 02="-15247.69043"/>
					</in1>
					<out1 v="-15247.69043"/>
				</object>
			</c>
			<c type="29">
				<object id="75" i="1">
					<pos x="5" y="4.5"/>
					<in1 component_id="56">
						<v 01="-1193.72998" 02="-15247.69043"/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="41">
				<object id="76" count="2" offset="2">
					<pos x="-3" y="2.25"/>
					<inc component_id="16">
						<v 01="160" 02="96" 03="15" 04="95"/>
					</inc>
					<in1 component_id="75"/>
					<in2 component_id="77"/>
					<out1>
						<v 01="160" 02="96" 03="15" 04="95"/>
					</out1>
				</object>
			</c>
			<c type="29">
				<object id="77" i="2">
					<pos x="5" y="4"/>
					<in1 component_id="56">
						<v 01="-1193.72998" 02="-15247.69043"/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="31">
				<object id="80" i="5">
					<pos x="5" y="1"/>
					<in1 component_id="56">
						<v 01="-1193.72998" 02="-15247.69043"/>
					</in1>
					<out1/>
				</object>
			</c>
		</components>
		<components_bridge>
			<c type="7">
				<object id="3">
					<pos x="5.5"/>
					<in1 component_id="56" node_index="1">
						<v/>
					</in1>
					<out1>
						<v/>
					</out1>
				</object>
			</c>
			<c type="2">
				<object id="8">
					<pos x="-5.25" y="-1.5"/>
					<in1 v="-1206.119873"/>
					<out1 v="-1206.119873"/>
				</object>
			</c>
			<c type="2">
				<object id="9">
					<pos x="-5.25" y="-2"/>
					<in1 v="-15285.206055"/>
					<out1 v="-15285.206055"/>
				</object>
			</c>
			<c type="2">
				<object id="13">
					<pos x="-5.25" y="-2.5"/>
					<in1 v="0.246898"/>
					<out1 v="0.246898"/>
				</object>
			</c>
			<c type="4">
				<object id="16">
					<pos x="-4" y="3.5"/>
					<in1>
						<v 01="160" 02="96" 03="15" 04="95"/>
					</in1>
					<out1>
						<v 01="160" 02="96" 03="15" 04="95"/>
					</out1>
				</object>
			</c>
			<c type="1">
				<object id="38">
					<pos x="3.5" y="4.5"/>
					<in1 component_id="17"/>
					<out1/>
				</object>
			</c>
			<c>
				<object id="53">
					<pos x="0.5" y="-1.5"/>
					<in1/>
					<out1/>
				</object>
			</c>
			<c type="2">
				<object id="54">
					<pos x="0.5" y="-2"/>
					<in1 v="-1193.72998"/>
					<out1 v="-1193.72998"/>
				</object>
			</c>
			<c type="2">
				<object id="55">
					<pos x="0.5" y="-2.5"/>
					<in1 v="-15247.69043"/>
					<out1 v="-15247.69043"/>
				</object>
			</c>
			<c type="3">
				<object id="65">
					<pos x="6.5" y="2.5"/>
					<in1 component_id="62"/>
					<out1/>
				</object>
			</c>
			<c type="1">
				<object id="67">
					<pos x="6.5" y="5"/>
					<in1 component_id="68"/>
					<out1/>
				</object>
			</c>
		</components_bridge>
		<groups/>
		<component_states>
			<c0 id="4" script='waypoints = {}
counter = 0
currentC = 0
lastPulse = false

function onTick()
	reset = input.getBool(3)
	pulse = input.getBool(4)

	w = input.getNumber(1)
	h = input.getNumber(2)
	
	zoom = input.getNumber(7)
	output.setNumber(1, zoom)
	x = input.getNumber(8)
	y = input.getNumber(9)
	bearing = input.getNumber(10)
	newX = input.getNumber(11)
	newY = input.getNumber(12)
	currentC = input.getNumber(13)
	
	if (currentC == counter) then reset = true end
	
	if (reset) then
		waypoints = {}
		counter = 0
	end
	
	if (pulse and not lastPulse) then
		
		waypoints[counter * 2 + 1] = newX
		waypoints[counter * 2 + 2] = newY
		
		counter = counter + 1
	end
	
	
	
	lastPulse = pulse
end

function onDraw()
			
	w = screen.getWidth()
	h = screen.getHeight()	
	
	if (w&lt;h) then
		size = w * 0.04
	else
		size = h * 0.04
	end
	
	screen.drawMap(x, y, zoom)
	
	firstX, firstY = map.mapToScreen(x, y, zoom, w, h, x, y)
	
	for i = currentC, counter - 1 do
		secondX, secondY = map.mapToScreen(x, y, zoom, w, h, waypoints[i * 2 + 1], waypoints[i * 2 + 2])
		radius = cramp(0, 1, (1 - zoom / 10)) * size
		
		screen.setColor(255, 165, 0, 255)
		screen.drawLine(firstX, firstY, secondX, secondY)
		
		screen.setColor(0, 0, 0, 240)
		screen.drawCircleF(secondX, secondY, radius)
		
		screen.setColor(0, 0, 0, 255)
		screen.drawText(secondX + radius, secondY + radius, string.format("%.0f", i + 1))
		
		firstX = secondX
		firstY = secondY
	end
	
	
	screen.setColor(200, 0, 0, 128)
	drawCurrentPosition(w, h)
	
	screen.setColor(220, 0, 0, 255)
	screen.drawRectF(findRectCenterX(w, 2), findRectCenterY(h, 2), 2, 2)
end
	
function drawCurrentPosition(w, h)
	if (w&lt;h) then
		radius = w * 0.09
	else
		radius = h * 0.09
	end
	cx = w/2
	cy = h/2
	compassDegrees = bearing * -360 % 360
	translatedBearing = compassDegrees + 90
	rad1 = math.rad(translatedBearing)
	rad2 = math.rad(translatedBearing + 140)
	rad3 = math.rad(translatedBearing + 220)
	x1 = cx - radius * math.cos(rad1)
	y1 = cy - radius * math.sin(rad1)
	x2 = cx - radius * math.cos(rad2)
	y2 = cy - radius * math.sin(rad2)
	x3 = cx - radius * math.cos(rad3)
	y3 = cy - radius * math.sin(rad3)
	screen.drawTriangleF(x1, y1, x2, y2, x3, y3)
end
	
function findRectCenterX(w, rectW)
	return w/2 - (rectW / 2)
end
	
function findRectCenterY(h, rectH)
	return h/2 - (rectH / 2)
end
	
function cramp(min, max, value)
	if (value &lt; min) then return min
	elseif (value &gt; max) then return max
	else return value end
end'>
				<pos x="-1"/>
				<in1 component_id="11">
					<v 01="160" 02="96" 03="15" 04="95" 07="1" 08="-1206.113037" 09="-15285.206055" 10="0.246914" 11="-1193.72998" 12="-15247.69043"/>
				</in1>
				<in2>
					<v/>
				</in2>
				<out1>
					<v 01="1"/>
				</out1>
				<out2>
					<v/>
				</out2>
			</c0>
			<c1 id="11" count="7" offset="6">
				<pos x="-2" y="0.5"/>
				<inc component_id="76">
					<v 01="160" 02="96" 03="15" 04="95"/>
				</inc>
				<in1 component_id="49" v="1"/>
				<in2 component_id="8" v="-1206.119873"/>
				<in3 component_id="9" v="-15285.206055"/>
				<in4 component_id="13" v="0.246898"/>
				<in5 component_id="72" v="-1193.72998"/>
				<in6 component_id="73" v="-15247.69043"/>
				<in7 component_id="70"/>
				<out1>
					<v 01="160" 02="96" 03="15" 04="95" 07="1" 08="-1206.119873" 09="-15285.206055" 10="0.246898" 11="-1193.72998" 12="-15247.69043"/>
				</out1>
			</c1>
			<c2 id="17">
				<pos x="2" y="4.5"/>
				<in1 component_id="29">
					<v 01="1"/>
				</in1>
				<out1/>
			</c2>
			<c3 id="29" script='white = {255, 255, 255, 128}
black = {0, 0, 0, 128}
green = {0, 200, 0, 128}
red = {200, 0, 0, 128}
blue = {50, 50, 200, 128}
yellow = {255, 203, 80, 128}

zoom = 1
--anchor example(x, y). Range[0;1]
firstRow = {0, 0}
lastRow = {0, 1}

--1. Add button(width, height, color, text, textColor, anchor, offsetX, offsetY)
zoomInButton = {7, 7, black, "+", white, lastRow, 0, 0}
zoomOutButton = {7, 7, black, "-", white, lastRow, 7, 0}
startButton = {7, 7, black, "S", green, lastRow, 14, 0}
resetButton = {7, 7, black, "R", red, lastRow, 21, 0}



function onTick()
	w = input.getNumber(1)
	h = input.getNumber(2)
	inputX = input.getNumber(3)
	inputY = input.getNumber(4)
	bearing = input.getNumber(5)
	waypointsCounter = input.getNumber(6)
	currentWaypointsCounter = input.getNumber(7)
	totalDistance = input.getNumber(8) / 1000
	
	compassDegrees = bearing * -360 % 360
	bearingButton = {17, 7, black, string.format("%.0f", compassDegrees), red, firstRow, 0, 0}
	
	waypointsCounterButton = {17, 7, black, string.format("%.0f", currentWaypointsCounter) .. "/" .. string.format("%0.f", waypointsCounter), blue, firstRow, 17, 0}
	
	totalDistanceButton = {22, 7, black, string.format("%.1f", totalDistance), yellow, firstRow, 34, 0}
	
	isPressed = input.getBool(1)
	
	--2. Check if it&apos;s pressed
	currentButton = zoomInButton
	zoomingIn = isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)
	
	currentButton = zoomOutButton
	zoomingOut = isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)
	
	currentButton = startButton
	starting = isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)
	
	currentButton = resetButton
	resetting = isPressed and isPointInRectangle(inputX, inputY, w, h, currentButton)

	--3. Perform an action if it&apos;s pressed
	if (zoomingOut and zoom &lt; 50) then 
		zoom = zoom + zoom * 0.05
		output.setBool(1, true)
	elseif (zoomingIn and zoom &gt; 0.1) then
		zoom = zoom - zoom * 0.05 
		output.setBool(1, true)
	elseif (starting) then
		output.setBool(1, true)
		output.setBool(2, true)
	elseif (resetting) then 
		output.setBool(1, true)
		output.setBool(3, true)
	else
		output.setBool(1, false)
		output.setBool(2, false)
		output.setBool(3, false)
	end
	
	output.setNumber(1, zoom)
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()					
	
	--4. Draw the button
	drawButton(zoomInButton)
	drawButton(zoomOutButton)
	drawButton(startButton)
	drawButton(resetButton)
	drawButton(bearingButton)
	drawButton(waypointsCounterButton)
	drawButton(totalDistanceButton)
end


function unpack(pack)
	return table.unpack(pack)
end

function isPointInRectangle(x, y, w, h, button)
	rectX = button[6][1] * (w - button[1]) + button[7]
	rectY = button[6][2] * (h - button[2]) + button[8]
	rectW = button[1]
	rectH = button[2]
	return x &gt; rectX and y &gt; rectY and x &lt; rectX+rectW and y &lt; rectY+rectH
end

function drawButton(button)
	x = button[6][1] * (w - button[1]) + button[7]
	y = button[6][2] * (h - button[2]) + button[8]
	width = button[1]
	height = button[2]
	
	screen.setColor(unpack(button[3]))
	screen.drawRectF(x, y, width, height)
	
	frameColor = {button[3][1] * 0.8, button[3][2] * 0.8, button[3][3] * 0.8, 255}
	screen.setColor(unpack(frameColor))
	screen.drawRect(x, y, width, height)
	
	screen.setColor(unpack(button[5]))
	screen.drawTextBox(x, y, width, height, button[4], 1, 1)
end'>
				<pos x="1"/>
				<in1 component_id="61">
					<v 01="160" 02="96" 03="15" 04="95" 05="0.246914"/>
				</in1>
				<in2 component_id="4" node_index="1">
					<v/>
				</in2>
				<out1>
					<v 01="1"/>
				</out1>
				<out2>
					<v/>
				</out2>
			</c3>
			<c4 id="49">
				<pos x="2" y="4"/>
				<in1 component_id="29">
					<v 01="1"/>
				</in1>
				<out1 v="1"/>
			</c4>
			<c5 id="56" script="safezone = 10

waypoints = {}
counter = 0
currentC = 0

onRoute = false

lastPulse = false

function onTick()
	start = input.getBool(2)
	reset = input.getBool(3)
	pulse = input.getBool(4)
	
	currentX = input.getNumber(4)
	currentY = input.getNumber(5)
	compass = input.getNumber(6)
	bearing = compass * -360 % 360
	
	if (pulse and not lastPulse) then
		x = input.getNumber(2)
		y = input.getNumber(3)
		
		output.setNumber(1, x)
		output.setNumber(2, y)
		
		waypoints[counter * 2 + 1] = x
		waypoints[counter * 2 + 2] = y
		counter = counter + 1
	end
	
	if (start and counter &gt; 0) then onRoute = true end
	
	if (reset) then
		waypoints = {}
		counter = 0
		currentC = 0
		onRoute = false
		rudders = 0
	end
	
	
	if (onRoute and currentC ~= counter) then
		angle = math.atan(waypoints[currentC * 2 + 2] - currentY, waypoints[currentC * 2 + 1] - currentX) * (180 / math.pi) - 90
		
		--adjust the angle calculation
		if (angle &lt; 0) then angle = angle * -1
		elseif (angle &gt; 0) then angle = angle + 270 end
		
		--determine to which side to turn
		right = angle - bearing
		if (right &lt; 0) then right = right + 360 end
		left = 360 - right
		
		--turn rudders
		if (left &lt; right) then
			if (left &lt; safezone) then rudders = -left / safezone
			else rudders = -1 end
		elseif (left &gt; right) then
			if (right &lt; safezone) then rudders = right / safezone
			else rudders = 1 end
		else rudders = 0 end
		
		--determine when the checkpoint is reached
		distance = calculateDistance(currentX, currentY, waypoints[currentC * 2 + 1], waypoints[currentC * 2 + 2])
		if (distance &lt; 15) then currentC = currentC + 1 end
	elseif (onRoute and currentC == counter) then
		waypoints = {}
		counter = 0
		currentC = 0
		onRoute = false
		rudders = 0
	end
	
	totalDistance = 0
	firstX, firstY = currentX, currentY
	
	for i = currentC, counter - 1 do
		secondX, secondY = waypoints[i * 2 + 1], waypoints[i * 2 + 2]
		totalDistance = totalDistance + calculateDistance(firstX, firstY, secondX, secondY)
	end
	
	output.setBool(1, onRoute)
	output.setBool(2, reset)
	output.setBool(3, pulse)
	
	output.setNumber(3, rudders)
	output.setNumber(4, counter)
	output.setNumber(5, currentC)
	output.setNumber(6, totalDistance)
	
	lastPulse = pulse
end
	
function calculateDistance(x1, y1, x2, y2)
	return math.sqrt((x1 - x2)^2 + (y1 - y2)^2)
end">
				<pos x="4"/>
				<in1 component_id="57">
					<v 01="1" 02="-1193.72998" 03="-15247.69043" 04="-1206.113037" 05="-15285.206055" 06="0.246914"/>
				</in1>
				<in2 component_id="29" node_index="1">
					<v/>
				</in2>
				<out1>
					<v 01="-1193.72998" 02="-15247.69043"/>
				</out1>
				<out2>
					<v/>
				</out2>
			</c5>
			<c6 id="57" count="5" offset="1">
				<pos x="3" y="-4"/>
				<inc component_id="60">
					<v 01="1"/>
				</inc>
				<in1 component_id="54" v="-1193.72998"/>
				<in2 component_id="55" v="-15247.69043"/>
				<in3 component_id="8" v="-1206.119873"/>
				<in4 component_id="9" v="-15285.206055"/>
				<in5 component_id="13" v="0.246898"/>
				<out1>
					<v 01="1" 02="-1193.72998" 03="-15247.69043" 04="-1206.119873" 05="-15285.206055" 06="0.246898"/>
				</out1>
			</c6>
			<c7 id="60" count="1" offset="3">
				<pos x="2" y="-1.5"/>
				<inc component_id="29">
					<v 01="1"/>
				</inc>
				<in1 component_id="53"/>
				<out1>
					<v 01="1"/>
				</out1>
			</c7>
			<c8 id="61" count="4" offset="4">
				<pos x="0.5" y="1.5"/>
				<inc component_id="16">
					<v 01="160" 02="96" 03="15" 04="95"/>
				</inc>
				<in1 component_id="13" v="0.246898"/>
				<in2 component_id="69"/>
				<in3 component_id="70"/>
				<in4 component_id="80"/>
				<out1>
					<v 01="160" 02="96" 03="15" 04="95" 05="0.246898"/>
				</out1>
			</c8>
			<c9 id="62" i="2">
				<pos x="5" y="2.5"/>
				<in1 component_id="56">
					<v 01="-1193.72998" 02="-15247.69043"/>
				</in1>
				<out1/>
			</c9>
			<c10 id="68">
				<pos x="5" y="5"/>
				<in1 component_id="56">
					<v 01="-1193.72998" 02="-15247.69043"/>
				</in1>
				<out1/>
			</c10>
			<c11 id="69" i="3">
				<pos x="5" y="2"/>
				<in1 component_id="56">
					<v 01="-1193.72998" 02="-15247.69043"/>
				</in1>
				<out1/>
			</c11>
			<c12 id="70" i="4">
				<pos x="5" y="1.5"/>
				<in1 component_id="56">
					<v 01="-1193.72998" 02="-15247.69043"/>
				</in1>
				<out1/>
			</c12>
			<c13 id="72">
				<pos x="5" y="3.5"/>
				<in1 component_id="56">
					<v 01="-1193.72998" 02="-15247.69043"/>
				</in1>
				<out1 v="-1193.72998"/>
			</c13>
			<c14 id="73" i="1">
				<pos x="5" y="3"/>
				<in1 component_id="56">
					<v 01="-1193.72998" 02="-15247.69043"/>
				</in1>
				<out1 v="-15247.69043"/>
			</c14>
			<c15 id="75" i="1">
				<pos x="5" y="4.5"/>
				<in1 component_id="56">
					<v 01="-1193.72998" 02="-15247.69043"/>
				</in1>
				<out1/>
			</c15>
			<c16 id="76" count="2" offset="2">
				<pos x="-3" y="2.25"/>
				<inc component_id="16">
					<v 01="160" 02="96" 03="15" 04="95"/>
				</inc>
				<in1 component_id="75"/>
				<in2 component_id="77"/>
				<out1>
					<v 01="160" 02="96" 03="15" 04="95"/>
				</out1>
			</c16>
			<c17 id="77" i="2">
				<pos x="5" y="4"/>
				<in1 component_id="56">
					<v 01="-1193.72998" 02="-15247.69043"/>
				</in1>
				<out1/>
			</c17>
			<c18 id="80" i="5">
				<pos x="5" y="1"/>
				<in1 component_id="56">
					<v 01="-1193.72998" 02="-15247.69043"/>
				</in1>
				<out1/>
			</c18>
		</component_states>
		<component_bridge_states>
			<c0 id="3">
				<pos x="5.5"/>
				<in1 component_id="56" node_index="1">
					<v/>
				</in1>
				<out1>
					<v/>
				</out1>
			</c0>
			<c1 id="8">
				<pos x="-5.25" y="-1.5"/>
				<in1 v="-1206.119873"/>
				<out1 v="-1206.119873"/>
			</c1>
			<c2 id="9">
				<pos x="-5.25" y="-2"/>
				<in1 v="-15285.206055"/>
				<out1 v="-15285.206055"/>
			</c2>
			<c3 id="13">
				<pos x="-5.25" y="-2.5"/>
				<in1 v="0.246898"/>
				<out1 v="0.246898"/>
			</c3>
			<c4 id="16">
				<pos x="-4" y="3.5"/>
				<in1>
					<v 01="160" 02="96" 03="15" 04="95"/>
				</in1>
				<out1>
					<v 01="160" 02="96" 03="15" 04="95"/>
				</out1>
			</c4>
			<c5 id="38">
				<pos x="3.5" y="4.5"/>
				<in1 component_id="17"/>
				<out1/>
			</c5>
			<c6 id="53">
				<pos x="0.5" y="-1.5"/>
				<in1/>
				<out1/>
			</c6>
			<c7 id="54">
				<pos x="0.5" y="-2"/>
				<in1 v="-1193.72998"/>
				<out1 v="-1193.72998"/>
			</c7>
			<c8 id="55">
				<pos x="0.5" y="-2.5"/>
				<in1 v="-15247.69043"/>
				<out1 v="-15247.69043"/>
			</c8>
			<c9 id="65">
				<pos x="6.5" y="2.5"/>
				<in1 component_id="62"/>
				<out1/>
			</c9>
			<c10 id="67">
				<pos x="6.5" y="5"/>
				<in1 component_id="68"/>
				<out1/>
			</c10>
		</component_bridge_states>
		<group_states/>
	</group>
</microprocessor>

