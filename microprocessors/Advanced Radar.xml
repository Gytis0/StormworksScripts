<?xml version="1.0" encoding="UTF-8"?>
<microprocessor name="Advanced Radar" description="Advanced Radar uses GPS to also continously calculate the targets positions and track them. This can be used with Auto-aim." width="4" length="2" id_counter="89" id_counter_node="20" sym0="65535" sym1="64575" sym2="61711" sym3="57863" sym4="55251" sym5="49667" sym6="33025" sym7="32769" sym8="36737" sym9="48897" sym10="57091" sym11="57091" sym12="60935" sym13="61967" sym14="64575" sym15="65535">
	<nodes>
		<n id="1" component_id="2">
			<node label="Rotation" mode="1" type="1" description="The input signal to be processed."/>
		</n>
		<n id="2" component_id="4">
			<node label="Radar Info" mode="1" type="5" description="The input signal to be processed.">
				<position x="1"/>
			</node>
		</n>
		<n id="3" component_id="7">
			<node label="Monitor" type="6" description="The input signal to be processed.">
				<position z="1"/>
			</node>
		</n>
		<n id="4" component_id="9">
			<node label="Target Found 1" description="The input signal to be processed.">
				<position x="1" z="1"/>
			</node>
		</n>
		<n id="9" component_id="58">
			<node label="Target Found 2" description="The input signal to be processed.">
				<position x="2" z="1"/>
			</node>
		</n>
		<n id="18" component_id="85">
			<node label="Range" mode="1" type="1" description="The input signal to be processed.">
				<position x="2"/>
			</node>
		</n>
		<n id="19" component_id="88">
			<node label="GPS X" mode="1" type="1" description="The input signal to be processed.">
				<position x="3"/>
			</node>
		</n>
		<n id="20" component_id="89">
			<node label="GPS Y" mode="1" type="1" description="The input signal to be processed.">
				<position x="3" z="1"/>
			</node>
		</n>
	</nodes>
	<group>
		<data>
			<inputs/>
			<outputs/>
		</data>
		<components>
			<c type="56">
				<object id="10" script="function onTick()
	rot = input.getNumber(1) - 0.25
	
	degrees = (rot - math.floor(rot)) * 360
	degreesShadow = degrees - 20
	
	rad = math.rad(degrees)
	radShadow = math.rad(degreesShadow)
	
	output.setNumber(30, rad)
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()
	
	if (w &lt; h) then radius = w/2
	else radius = h/2 end
	
	
	triangleX1 = w/2
	triangleY1 = h/2
	triangleX2 = w/2 + radius * math.cos(rad)
	triangleY2 = h/2 + radius * math.sin(rad)
	triangleX3 = w/2 + radius * math.cos(radShadow)
	triangleY3 = h/2 + radius * math.sin(radShadow)
	
	lineX1 = w/2
	lineY1 = h/2
	lineX2 = w/2 + radius * math.cos(rad)
	lineY2 = h/2 + radius * math.sin(rad)
	
	screen.setColor(0, 75, 0)
	screen.drawTriangleF(triangleX1, triangleY1, triangleX2, triangleY2, triangleX3, triangleY3)
	screen.setColor(0, 200, 0)
	screen.drawLine(lineX1, lineY1, lineX2, lineY2)
	screen.setColor(0, 255, 0)
	screen.drawCircle(w / 2, h / 2, radius)
	screen.drawCircle(w / 2, h / 2, radius+1)
end">
					<pos x="-0.5" y="-0.25"/>
					<in1 component_id="11">
						<v 01="0.786861"/>
					</in1>
					<in2>
						<v/>
					</in2>
					<out1>
						<v 30="3.373197"/>
					</out1>
					<out2>
						<v/>
					</out2>
				</object>
			</c>
			<c type="40">
				<object id="11" count="1">
					<pos x="-1.75"/>
					<inc>
						<v/>
					</inc>
					<in1 component_id="2" v="0.789407"/>
					<out1>
						<v 01="0.789407"/>
					</out1>
				</object>
			</c>
			<c type="56">
				<object id="25" script="counter = 1

timeToStay = 13
tickTime = 0
currentTime = 0
secondsPerDay = 86400

lasttf1 = false
lasttf2 = false
--target expiration time, distance, rad, startX, startY, endX, endY
targets = {}

function colorDim(currentTime, endTime)
	startTime = endTime - timeToStay
	
	currentTime = currentTime - startTime
	endTime = endTime - startTime
	
	return currentTime / endTime
end

--First register the target and determine whether it's a new target or an already existing one
function registerTarget()
	
end

function updateTarget(index, time, distance, rad, x, y)
	targets[index] = {time + timeToStay, distance, rad, targets[index][6], targets[index][7], x, y)
end

-- If the target is new, add it
function addTarget(time, distance, rad)
	x = distance * math.cos(rad)
	y = distance * math.sin(rad)
	
	targets[counter] = {time + timeToStay, distance, rad, x1, y1, x2, y2}
	counter = counter + 1
end

-- If the target was lost, remove it
function removeTarget(index)
	targets[index] = nil
end

-- See if the target is the same
function findTarget(x, y)
	for k, v in pairs(targets) do
		if distanceBetweenPoints(x, y, v[6], v[7]) &lt; 100 then
			
	end
end

function distanceBetweenPoints(x1, y1, x2, y2)
	return math.sqrt((x2-x1)^2 + (y2-y1)^2)
end

function onTick()

	tickTime = tickTime + 1
	if (tickTime &gt;= 60) then 
		currentTime = currentTime + 1
		tickTime = 0
	end
	tf1 = input.getBool(1)
	td1 = input.getNumber(1)
	aa1 = input.getNumber(2)
	ea1 = input.getNumber(3)
	tsd1 = input.getNumber(4)
	
	tf2 = input.getBool(2)
	td2 = input.getNumber(5)
	aa2 = input.getNumber(6)
	ea2 = input.getNumber(7)
	tsd2 = input.getNumber(8)
	
	rad = input.getNumber(29)
	range = input.getNumber(30)
	gpsX = input.getNumber(31)
	gpsY = input.getNumber(32)
	
	output.setBool(1, tf1)
	output.setBool(2, tf2)
	
	if (tf1 and not lasttf1) then addTarget(currentTime, td1, rad) end
	if (tf2 and not lasttf2) then addTarget(currentTime, td2, rad) end
	
	lasttf1 = tf1
	lasttf2 = tf2
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()
	
	if (w &lt; h) then radius = w/2
	else radius = h/2 end
	
	for k, v in pairs(targets) do
		if targets[k][1] &gt; currentTime then
			x1 = w/2 + ((targets[k][2] / range) * radius) * math.cos(targets[k][3])
			y1 = h/2 + ((targets[k][2] / range) * radius) * math.sin(targets[k][3])
			trans = 255 - 255 * colorDim(currentTime, targets[k][1])
			
			screen.setColor(175, 0, 0, trans)
			screen.drawCircleF(x1, y1, radius * 0.05)
			screen.setColor(25, 0, 0, trans)
			screen.drawCircleF(x1, y1, radius * 0.05 + 1)
			screen.setColor(255, 255, trans)
			screen.drawText(x1, y1, v[4] + v[5])
		else
			removeTarget(k)
		end
	end

end">
					<pos x="3" y="-1"/>
					<in1 component_id="31">
						<v 29="3.325197" 30="1000" 31="-13247.883789" 32="7067.958496"/>
					</in1>
					<in2 component_id="10" node_index="1">
						<v/>
					</in2>
					<out1>
						<v/>
					</out1>
					<out2>
						<v/>
					</out2>
				</object>
			</c>
			<c type="31">
				<object id="29" i="29">
					<pos x="0.75" y="0.5"/>
					<in1 component_id="10">
						<v 30="3.357197"/>
					</in1>
					<out1 v="3.357197"/>
				</object>
			</c>
			<c type="40">
				<object id="31" count="4" offset="28">
					<pos x="2"/>
					<inc component_id="4">
						<v/>
					</inc>
					<in1 component_id="29" v="3.341197"/>
					<in2 component_id="85" v="1000"/>
					<in3 component_id="88" v="-13247.883789"/>
					<in4 component_id="89" v="7067.958496"/>
					<out1>
						<v 29="3.341197" 30="1000" 31="-13247.883789" 32="7067.958496"/>
					</out1>
				</object>
			</c>
			<c type="29">
				<object id="66" i="1">
					<pos x="4.25" y="-0.75"/>
					<in1 component_id="25">
						<v/>
					</in1>
					<out1/>
				</object>
			</c>
			<c type="29">
				<object id="67">
					<pos x="4.25"/>
					<in1 component_id="25">
						<v/>
					</in1>
					<out1/>
				</object>
			</c>
		</components>
		<components_bridge>
			<c type="2">
				<object id="2">
					<pos x="-3" y="0.25"/>
					<in1 v="0.789407"/>
					<out1 v="0.789407"/>
				</object>
			</c>
			<c type="4">
				<object id="4">
					<pos x="0.75" y="1"/>
					<in1>
						<v/>
					</in1>
					<out1>
						<v/>
					</out1>
				</object>
			</c>
			<c type="7">
				<object id="7">
					<pos x="4.25" y="-1.5"/>
					<in1 component_id="25" node_index="1">
						<v/>
					</in1>
					<out1>
						<v/>
					</out1>
				</object>
			</c>
			<c type="1">
				<object id="9">
					<pos x="5.5"/>
					<in1 component_id="67"/>
					<out1/>
				</object>
			</c>
			<c type="1">
				<object id="58">
					<pos x="5.5" y="-0.75"/>
					<in1 component_id="66"/>
					<out1/>
				</object>
			</c>
			<c type="2">
				<object id="85">
					<pos x="0.75"/>
					<in1 v="1000"/>
					<out1 v="1000"/>
				</object>
			</c>
			<c type="2">
				<object id="88">
					<pos x="0.75" y="-0.5"/>
					<in1 v="-13247.883789"/>
					<out1 v="-13247.883789"/>
				</object>
			</c>
			<c type="2">
				<object id="89">
					<pos x="0.75" y="-1"/>
					<in1 v="7067.958496"/>
					<out1 v="7067.958496"/>
				</object>
			</c>
		</components_bridge>
		<groups/>
		<component_states>
			<c0 id="10" script="function onTick()
	rot = input.getNumber(1) - 0.25
	
	degrees = (rot - math.floor(rot)) * 360
	degreesShadow = degrees - 20
	
	rad = math.rad(degrees)
	radShadow = math.rad(degreesShadow)
	
	output.setNumber(30, rad)
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()
	
	if (w &lt; h) then radius = w/2
	else radius = h/2 end
	
	
	triangleX1 = w/2
	triangleY1 = h/2
	triangleX2 = w/2 + radius * math.cos(rad)
	triangleY2 = h/2 + radius * math.sin(rad)
	triangleX3 = w/2 + radius * math.cos(radShadow)
	triangleY3 = h/2 + radius * math.sin(radShadow)
	
	lineX1 = w/2
	lineY1 = h/2
	lineX2 = w/2 + radius * math.cos(rad)
	lineY2 = h/2 + radius * math.sin(rad)
	
	screen.setColor(0, 75, 0)
	screen.drawTriangleF(triangleX1, triangleY1, triangleX2, triangleY2, triangleX3, triangleY3)
	screen.setColor(0, 200, 0)
	screen.drawLine(lineX1, lineY1, lineX2, lineY2)
	screen.setColor(0, 255, 0)
	screen.drawCircle(w / 2, h / 2, radius)
	screen.drawCircle(w / 2, h / 2, radius+1)
end">
				<pos x="-0.5" y="-0.25"/>
				<in1 component_id="11">
					<v 01="0.786861"/>
				</in1>
				<in2>
					<v/>
				</in2>
				<out1>
					<v 30="3.373197"/>
				</out1>
				<out2>
					<v/>
				</out2>
			</c0>
			<c1 id="11" count="1">
				<pos x="-1.75"/>
				<inc>
					<v/>
				</inc>
				<in1 component_id="2" v="0.789407"/>
				<out1>
					<v 01="0.789407"/>
				</out1>
			</c1>
			<c2 id="25" script="counter = 1

timeToStay = 13
tickTime = 0
currentTime = 0
secondsPerDay = 86400

lasttf1 = false
lasttf2 = false
--target expiration time, distance, rad, startX, startY, endX, endY
targets = {}

function colorDim(currentTime, endTime)
	startTime = endTime - timeToStay
	
	currentTime = currentTime - startTime
	endTime = endTime - startTime
	
	return currentTime / endTime
end

--First register the target and determine whether it's a new target or an already existing one
function registerTarget()
	
end

function updateTarget(index, time, distance, rad, x, y)
	targets[index] = {time + timeToStay, distance, rad, targets[index][6], targets[index][7], x, y)
end

-- If the target is new, add it
function addTarget(time, distance, rad)
	x = distance * math.cos(rad)
	y = distance * math.sin(rad)
	
	targets[counter] = {time + timeToStay, distance, rad, x1, y1, x2, y2}
	counter = counter + 1
end

-- If the target was lost, remove it
function removeTarget(index)
	targets[index] = nil
end

-- See if the target is the same
function findTarget(x, y)
	for k, v in pairs(targets) do
		if distanceBetweenPoints(x, y, v[6], v[7]) &lt; 100 then
			
	end
end

function distanceBetweenPoints(x1, y1, x2, y2)
	return math.sqrt((x2-x1)^2 + (y2-y1)^2)
end

function onTick()

	tickTime = tickTime + 1
	if (tickTime &gt;= 60) then 
		currentTime = currentTime + 1
		tickTime = 0
	end
	tf1 = input.getBool(1)
	td1 = input.getNumber(1)
	aa1 = input.getNumber(2)
	ea1 = input.getNumber(3)
	tsd1 = input.getNumber(4)
	
	tf2 = input.getBool(2)
	td2 = input.getNumber(5)
	aa2 = input.getNumber(6)
	ea2 = input.getNumber(7)
	tsd2 = input.getNumber(8)
	
	rad = input.getNumber(29)
	range = input.getNumber(30)
	gpsX = input.getNumber(31)
	gpsY = input.getNumber(32)
	
	output.setBool(1, tf1)
	output.setBool(2, tf2)
	
	if (tf1 and not lasttf1) then addTarget(currentTime, td1, rad) end
	if (tf2 and not lasttf2) then addTarget(currentTime, td2, rad) end
	
	lasttf1 = tf1
	lasttf2 = tf2
end

function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()
	
	if (w &lt; h) then radius = w/2
	else radius = h/2 end
	
	for k, v in pairs(targets) do
		if targets[k][1] &gt; currentTime then
			x1 = w/2 + ((targets[k][2] / range) * radius) * math.cos(targets[k][3])
			y1 = h/2 + ((targets[k][2] / range) * radius) * math.sin(targets[k][3])
			trans = 255 - 255 * colorDim(currentTime, targets[k][1])
			
			screen.setColor(175, 0, 0, trans)
			screen.drawCircleF(x1, y1, radius * 0.05)
			screen.setColor(25, 0, 0, trans)
			screen.drawCircleF(x1, y1, radius * 0.05 + 1)
			screen.setColor(255, 255, trans)
			screen.drawText(x1, y1, v[4] + v[5])
		else
			removeTarget(k)
		end
	end

end">
				<pos x="3" y="-1"/>
				<in1 component_id="31">
					<v 29="3.325197" 30="1000" 31="-13247.883789" 32="7067.958496"/>
				</in1>
				<in2 component_id="10" node_index="1">
					<v/>
				</in2>
				<out1>
					<v/>
				</out1>
				<out2>
					<v/>
				</out2>
			</c2>
			<c3 id="29" i="29">
				<pos x="0.75" y="0.5"/>
				<in1 component_id="10">
					<v 30="3.357197"/>
				</in1>
				<out1 v="3.357197"/>
			</c3>
			<c4 id="31" count="4" offset="28">
				<pos x="2"/>
				<inc component_id="4">
					<v/>
				</inc>
				<in1 component_id="29" v="3.341197"/>
				<in2 component_id="85" v="1000"/>
				<in3 component_id="88" v="-13247.883789"/>
				<in4 component_id="89" v="7067.958496"/>
				<out1>
					<v 29="3.341197" 30="1000" 31="-13247.883789" 32="7067.958496"/>
				</out1>
			</c4>
			<c5 id="66" i="1">
				<pos x="4.25" y="-0.75"/>
				<in1 component_id="25">
					<v/>
				</in1>
				<out1/>
			</c5>
			<c6 id="67">
				<pos x="4.25"/>
				<in1 component_id="25">
					<v/>
				</in1>
				<out1/>
			</c6>
		</component_states>
		<component_bridge_states>
			<c0 id="2">
				<pos x="-3" y="0.25"/>
				<in1 v="0.789407"/>
				<out1 v="0.789407"/>
			</c0>
			<c1 id="4">
				<pos x="0.75" y="1"/>
				<in1>
					<v/>
				</in1>
				<out1>
					<v/>
				</out1>
			</c1>
			<c2 id="7">
				<pos x="4.25" y="-1.5"/>
				<in1 component_id="25" node_index="1">
					<v/>
				</in1>
				<out1>
					<v/>
				</out1>
			</c2>
			<c3 id="9">
				<pos x="5.5"/>
				<in1 component_id="67"/>
				<out1/>
			</c3>
			<c4 id="58">
				<pos x="5.5" y="-0.75"/>
				<in1 component_id="66"/>
				<out1/>
			</c4>
			<c5 id="85">
				<pos x="0.75"/>
				<in1 v="1000"/>
				<out1 v="1000"/>
			</c5>
			<c6 id="88">
				<pos x="0.75" y="-0.5"/>
				<in1 v="-13247.883789"/>
				<out1 v="-13247.883789"/>
			</c6>
			<c7 id="89">
				<pos x="0.75" y="-1"/>
				<in1 v="7067.958496"/>
				<out1 v="7067.958496"/>
			</c7>
		</component_bridge_states>
		<group_states/>
	</group>
</microprocessor>

