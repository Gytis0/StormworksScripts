<?xml version="1.0" encoding="UTF-8"?>
<microprocessor name="Auto-Track (Digital)" description="Micro used for auto aiming at targets" width="5" length="3" id_counter="172" id_counter_node="41" sym0="16384" sym1="57728" sym2="16768" sym3="960" sym4="1632" sym5="3120" sym6="6168" sym7="29070" sym8="29070" sym9="6168" sym10="3120" sym11="1632" sym12="960" sym13="384" sym14="384">
	<nodes>
		<n id="2" component_id="4">
			<node label="Radar Info" mode="1" type="5" description="The input signal to be processed.">
				<position z="1"/>
			</node>
		</n>
		<n id="3" component_id="7">
			<node label="Monitor" type="6" description="The input signal to be processed.">
				<position x="1"/>
			</node>
		</n>
		<n id="19" component_id="88">
			<node label="Horizontal speed" type="1" description="The input signal to be processed.">
				<position x="2" z="1"/>
			</node>
		</n>
		<n id="20" component_id="91">
			<node label="Vertical speed" type="1" description="The input signal to be processed.">
				<position x="2"/>
			</node>
		</n>
		<n id="23" component_id="104">
			<node label="Camera" mode="1" type="6" description="The input signal to be processed."/>
		</n>
		<n id="24" component_id="112">
			<node label="Compass (Horizontal rotation)" mode="1" type="1" description="The input signal to be processed.">
				<position x="3" z="1"/>
			</node>
		</n>
		<n id="25" component_id="113">
			<node label="Tilt sensor (Vertical rotation)" mode="1" type="1" description="The input signal to be processed.">
				<position x="3"/>
			</node>
		</n>
		<n id="32" component_id="136">
			<node label="Controls" mode="1" type="5" description="The input signal to be processed.">
				<position z="2"/>
			</node>
		</n>
		<n id="33" component_id="144">
			<node label="Ammo left" mode="1" type="1" description="The input signal to be processed.">
				<position x="3" z="2"/>
			</node>
		</n>
		<n id="34" component_id="146">
			<node label="Target Detected" description="The input signal to be processed.">
				<position x="2" z="2"/>
			</node>
		</n>
		<n id="35" component_id="150">
			<node label="Locked On" description="The input signal to be processed.">
				<position x="1" z="2"/>
			</node>
		</n>
		<n id="37" component_id="159">
			<node label="Averaged Radar info" mode="1" type="5" description="The input signal to be processed.">
				<position x="1" z="1"/>
			</node>
		</n>
		<n id="39" component_id="166">
			<node label="GPS X" mode="1" type="1" description="The input signal to be processed.">
				<position x="4" z="1"/>
			</node>
		</n>
		<n id="40" component_id="167">
			<node label="GPS Y" mode="1" type="1" description="The input signal to be processed.">
				<position x="4" z="2"/>
			</node>
		</n>
		<n id="41" component_id="170">
			<node label="GPS Z" mode="1" type="1" description="The input signal to be processed.">
				<position x="4"/>
			</node>
		</n>
	</nodes>
	<group>
		<data>
			<inputs/>
			<outputs/>
		</data>
		<components>
			<c type="56">
				<object id="105" script='rotationSpeed = property.getNumber("Rotation Speed")
ceilLimit = (property.getNumber("Ceiling Limit") / 4) - 0.02
floorLimit = (property.getNumber("Floor Limit") / 4) - 0.02
upsideDown = property.getBool("Is Radar Upside Down")

fovXsize = 0.2
fovYsize = 0.2
cameraAzimuth = 0.095
cameraElevation = 0.091

compassStarting = -9999

function compassToDeg(compass)
	return compass * -360 % 360	
end

function round(num, numDecimalPlaces)
  local mult = 10^(numDecimalPlaces or 0)
  return math.floor(num * mult + 0.5) / mult
end

function interpolation(start, finish, perc)
	return start + ((finish - start) * perc)
end

function clamp(value, min, max)
	if value &gt; max then return max end
	if value &lt; min then return min end
	return value
end

function rotateGunToTarget()
	horizontalSpeed = azimuth * rotationSpeed * 50
	verticalSpeed = elevation * rotationSpeed * 50
end

function rotateGunToStart()
	current = compassToDeg(rotH)
	target = compassToDeg(compassStarting)
	
	
	horizontalSpeed = side * rotationSpeed * 50
	verticalSpeed = -rotV * rotationSpeed * 50
end

function onTick()
	if compassStarting == (-9999) or compassStarting == 0 then
		compassStarting = input.getNumber(22)
	end
	--Radar inputs
	targetOnScreen = input.getBool(1)
	distance = input.getNumber(1)
	azimuth = round(input.getNumber(2), 3)
	elevation = round(input.getNumber(3), 3)
	
	if upsideDown then
		azimuth = azimuth * (-1)
		elevation = elevation * (-1)
	end
	
	--Player inputs (starts at 20)
	lock = input.getBool(2)
	reset = input.getBool(3)
	horizontalControl = input.getNumber(20)
	verticalControl = input.getNumber(21)
	
	rotH = input.getNumber(22)
	rotV = input.getNumber(23)
	
	ammoLeft = input.getNumber(24)
	
	averagedAzimuth = input.getNumber(25)
	averagedElevation = input.getNumber(26)
	
	--Compute if locked on
	if reset then
		lock = false
		temp = rotationSpeed
		rotationSpeed = 0.5
		rotateGunToStart()
		rotationSpeed = temp
	elseif lock and targetOnScreen then
		--Limit rotations to set boundaries
		if rotV &gt;= ceilLimit then
			elevation = 0
		end
		if rotV &lt;= floorLimit then
			rotV = 0
		end
	
		--rotate the gun
		rotateGunToTarget()
	else
		horizontalSpeed = rotationSpeed * horizontalControl
		verticalSpeed = rotationSpeed * verticalControl
		
		if rotV &gt;= ceilLimit and verticalSpeed &gt; 0 then verticalSpeed = 0 end
		if rotV &lt;= floorLimit and verticalSpeed &lt; 0 then verticalSpeed = 0 end
	end

	output.setNumber(1, horizontalSpeed)
	output.setNumber(2, verticalSpeed)
	output.setBool(1, targetOnScreen)
	output.setBool(2, lock)
end

function onDraw()
	screen.setColor(255, 255, 255, 50)
	h = screen.getHeight()
	w = screen.getWidth()
	
	screen.drawCircle(w/2, h/2, 4)
	
	screen.setColor(0, 255, 0, 50)
	--Lines showing horizontal boundaries
	screen.drawLine(w*(1-fovXsize), 0, w*(1-fovXsize), h)
	screen.drawLine(w*fovXsize, 0, w*fovXsize, h)
	
	--Lines showing vertical boundaries
	screen.drawLine(0, h*fovYsize, w, h*fovYsize) 
	screen.drawLine(0, h*(1-fovYsize), w, h*(1-fovYsize))
	
	screen.setColor(255, 0, 0)
	screen.drawText(0, h - 5, ammoLeft)
	
	xPerc = (averagedAzimuth + cameraAzimuth) / (cameraAzimuth * 2)
	targetX = interpolation(0, w, xPerc)
	yPerc = (averagedElevation*(-1) + cameraElevation) / (cameraElevation * 2)
	targetY = interpolation(0, h, yPerc)

	if targetOnScreen then
		screen.setColor(255, 0, 0, 100)
		screen.drawCircle(targetX, targetY, 4)
		screen.drawTextBox(targetX + 5, targetY + 5, 20, 4, round(distance, 1), -1, 0)
	end
	
	screen.drawText(0, 5, compassStarting)
end'>
					<pos x="3.5" y="-1"/>
					<in1 component_id="123"/>
					<in2 component_id="104"/>
				</object>
			</c>
			<c type="31">
				<object id="107">
					<pos x="5" y="-0.25"/>
					<in1 component_id="105"/>
				</object>
			</c>
			<c type="31">
				<object id="108" i="1">
					<pos x="5" y="-0.75"/>
					<in1 component_id="105"/>
				</object>
			</c>
			<c type="40">
				<object id="114" count="7" offset="19">
					<pos x="0.5" y="-2"/>
					<inc component_id="4"/>
					<in1 component_id="137"/>
					<in2 component_id="138"/>
					<in3 component_id="112"/>
					<in4 component_id="113"/>
					<in5 component_id="144"/>
					<in6 component_id="160"/>
					<in7 component_id="161"/>
				</object>
			</c>
			<c type="41">
				<object id="123" count="3">
					<pos x="2" y="-1"/>
					<inc component_id="114"/>
					<in1 component_id="153"/>
					<in2 component_id="139"/>
					<in3 component_id="140"/>
				</object>
			</c>
			<c type="31">
				<object id="137">
					<pos x="-1" y="-0.75"/>
					<in1 component_id="136"/>
				</object>
			</c>
			<c type="31">
				<object id="138" i="1">
					<pos x="-1" y="-1.25"/>
					<in1 component_id="136"/>
				</object>
			</c>
			<c type="29">
				<object id="139">
					<pos x="0.5" y="1"/>
					<in1 component_id="136"/>
				</object>
			</c>
			<c type="29">
				<object id="140" i="1">
					<pos x="0.5" y="0.5"/>
					<in1 component_id="136"/>
				</object>
			</c>
			<c type="19">
				<object id="141" name="Rotation Speed">
					<pos x="-3.75" y="0.25"/>
					<min text="0.1" value="0.1"/>
					<max text="3" value="3"/>
					<int text="0.1" value="0.1"/>
					<v text="1" value="1"/>
				</object>
			</c>
			<c type="19">
				<object id="142" name="Ceiling Limit">
					<pos x="-2.75" y="0.25"/>
					<min text="0"/>
					<max text="1" value="1"/>
					<int text="0.1" value="0.1"/>
					<v text="0.9" value="0.9"/>
				</object>
			</c>
			<c type="29">
				<object id="147">
					<pos x="5" y="-1.25"/>
					<in1 component_id="105"/>
				</object>
			</c>
			<c type="19">
				<object id="148" name="Floor Limit">
					<pos x="-2.75" y="-0.25"/>
					<min text="0"/>
					<max text="-1" value="-1"/>
					<int text="0.1" value="0.1"/>
					<v text="-0.3" value="-0.3"/>
				</object>
			</c>
			<c type="29">
				<object id="151" i="1">
					<pos x="5" y="-1.75"/>
					<in1 component_id="105"/>
				</object>
			</c>
			<c type="29">
				<object id="153">
					<pos x="0.5" y="1.5"/>
					<in1 component_id="4"/>
				</object>
			</c>
			<c type="31">
				<object id="160" i="1">
					<pos x="-1" y="-3.25"/>
					<in1 component_id="159"/>
				</object>
			</c>
			<c type="31">
				<object id="161" i="2">
					<pos x="-1" y="-3.75"/>
					<in1 component_id="159"/>
				</object>
			</c>
			<c type="56">
				<object id="162" script='blocksAbove = property.getNumber("Blocks Above Radar")
lastTarget = {nil, nil, nil}
target = {nil, nil, nil}

azimuth = 0
elevation = 0

function compassToDeg(compass)
	return compass * -360 % 360	
end

function tiltToDeg(tilt)
	tilt = tilt * 4
	tilt = tilt * 90
	return tilt
end

function radarToDeg(r)
	return math.deg(r * 2 * math.pi)
end

function unpack(t, i)
	i = i or 1
    if t[i] ~= nil then
    	return t[i], unpack(t, i + 1)
    end
end

function getTarget(x, y, z, distance, compass, azimuth, tilt, elevation)
	absAzimuth = compassToDeg(compass) + radarToDeg(azimuth)
	radAzimuth = math.rad(absAzimuth)
	absElevation = tiltToDeg(tilt) + radarToDeg(elevation)
	radElevation = math.rad(absElevation)
	
	targetX = x + (math.sin(radAzimuth) * distance)
	targetY = y + (math.cos(radAzimuth) * distance)
	targetZ = z + (math.sin(radElevation) * distance)
	
	return {targetX, targetY, targetZ}
end

function isEmpty(arr)
	if next(arr) == nil then return true
	else return false end
end

function onTick()
	distance = input.getNumber(1)
	azimuth = input.getNumber(2)
	elevation = input.getNumber(3)
	x = input.getNumber(4)
	y = input.getNumber(5)
	z = input.getNumber(6) - (blocksAbove / 2)
	compass = input.getNumber(7)
	tilt = input.getNumber(8)
	
	if distance == 0 then
		lastTarget = {}
		target = {}
	else
		if not isEmpty(target) then lastTarget = target end
		target = getTarget(x, y, z, distance, compass, azimuth, tilt, elevation)
		
		if not isEmpty(lastTarget) then 
			xl, yl, zl = unpack(lastTarget)
			x, y, z = unpack(target)
			xd = (x - xl) * 60
			yd = (y - yl) * 60
			zd = (z - zl) * 60
		end
		
		
	end
end

-- Draw function that will be executed when this script renders to a screen
function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()
	
	if not isEmpty(lastTarget) then
		screen.drawText(0, 5, "X: " .. azimuth)
		screen.drawText(0, 11, "Y: " .. elevation)
		screen.drawText(0, 17, "Z: " .. zd)
	end

end'>
					<pos x="2" y="-4.25"/>
					<in1 component_id="168"/>
				</object>
			</c>
			<c type="40">
				<object id="168" count="5" offset="3">
					<pos x="0.5" y="-5.25"/>
					<inc component_id="4"/>
					<in1 component_id="166"/>
					<in2 component_id="167"/>
					<in3 component_id="170"/>
					<in4 component_id="112"/>
					<in5 component_id="113"/>
				</object>
			</c>
			<c type="33">
				<object id="171" n="Is Radar Upside Down" on="Yes" off="No">
					<pos x="-3.75" y="-0.25"/>
				</object>
			</c>
			<c type="34">
				<object id="172" n="Blocks Above Radar">
					<pos x="-3.75" y="0.75"/>
					<v text="-9" value="-9"/>
				</object>
			</c>
		</components>
		<components_bridge>
			<c type="4">
				<object id="4">
					<pos x="-1" y="-0.25"/>
				</object>
			</c>
			<c type="7">
				<object id="7">
					<pos x="5" y="-2.25"/>
					<in1 component_id="105" node_index="1"/>
				</object>
			</c>
			<c type="3">
				<object id="88">
					<pos x="6.5" y="-0.25"/>
					<in1 component_id="107"/>
				</object>
			</c>
			<c type="3">
				<object id="91">
					<pos x="6.5" y="-0.75"/>
					<in1 component_id="108"/>
				</object>
			</c>
			<c type="6">
				<object id="104">
					<pos x="2" y="-2"/>
				</object>
			</c>
			<c type="2">
				<object id="112">
					<pos x="-1" y="-1.75"/>
				</object>
			</c>
			<c type="2">
				<object id="113">
					<pos x="-1" y="-2.25"/>
				</object>
			</c>
			<c type="4">
				<object id="136">
					<pos x="-3" y="-1.25"/>
				</object>
			</c>
			<c type="2">
				<object id="144">
					<pos x="-1" y="-2.75"/>
				</object>
			</c>
			<c type="1">
				<object id="146">
					<pos x="6.5" y="-1.25"/>
					<in1 component_id="147"/>
				</object>
			</c>
			<c type="1">
				<object id="150">
					<pos x="6.5" y="-1.75"/>
					<in1 component_id="151"/>
				</object>
			</c>
			<c type="4">
				<object id="159">
					<pos x="-3" y="-3.25"/>
				</object>
			</c>
			<c type="2">
				<object id="166">
					<pos x="-1" y="-4.5"/>
				</object>
			</c>
			<c type="2">
				<object id="167">
					<pos x="-1" y="-5"/>
				</object>
			</c>
			<c type="2">
				<object id="170">
					<pos x="-1" y="-5.5"/>
				</object>
			</c>
		</components_bridge>
		<groups/>
		<component_states>
			<c0 id="105" script='rotationSpeed = property.getNumber("Rotation Speed")
ceilLimit = (property.getNumber("Ceiling Limit") / 4) - 0.02
floorLimit = (property.getNumber("Floor Limit") / 4) - 0.02
upsideDown = property.getBool("Is Radar Upside Down")

fovXsize = 0.2
fovYsize = 0.2
cameraAzimuth = 0.095
cameraElevation = 0.091

compassStarting = -9999

function compassToDeg(compass)
	return compass * -360 % 360	
end

function round(num, numDecimalPlaces)
  local mult = 10^(numDecimalPlaces or 0)
  return math.floor(num * mult + 0.5) / mult
end

function interpolation(start, finish, perc)
	return start + ((finish - start) * perc)
end

function clamp(value, min, max)
	if value &gt; max then return max end
	if value &lt; min then return min end
	return value
end

function rotateGunToTarget()
	horizontalSpeed = azimuth * rotationSpeed * 50
	verticalSpeed = elevation * rotationSpeed * 50
end

function rotateGunToStart()
	current = compassToDeg(rotH)
	target = compassToDeg(compassStarting)
	
	
	horizontalSpeed = side * rotationSpeed * 50
	verticalSpeed = -rotV * rotationSpeed * 50
end

function onTick()
	if compassStarting == (-9999) or compassStarting == 0 then
		compassStarting = input.getNumber(22)
	end
	--Radar inputs
	targetOnScreen = input.getBool(1)
	distance = input.getNumber(1)
	azimuth = round(input.getNumber(2), 3)
	elevation = round(input.getNumber(3), 3)
	
	if upsideDown then
		azimuth = azimuth * (-1)
		elevation = elevation * (-1)
	end
	
	--Player inputs (starts at 20)
	lock = input.getBool(2)
	reset = input.getBool(3)
	horizontalControl = input.getNumber(20)
	verticalControl = input.getNumber(21)
	
	rotH = input.getNumber(22)
	rotV = input.getNumber(23)
	
	ammoLeft = input.getNumber(24)
	
	averagedAzimuth = input.getNumber(25)
	averagedElevation = input.getNumber(26)
	
	--Compute if locked on
	if reset then
		lock = false
		temp = rotationSpeed
		rotationSpeed = 0.5
		rotateGunToStart()
		rotationSpeed = temp
	elseif lock and targetOnScreen then
		--Limit rotations to set boundaries
		if rotV &gt;= ceilLimit then
			elevation = 0
		end
		if rotV &lt;= floorLimit then
			rotV = 0
		end
	
		--rotate the gun
		rotateGunToTarget()
	else
		horizontalSpeed = rotationSpeed * horizontalControl
		verticalSpeed = rotationSpeed * verticalControl
		
		if rotV &gt;= ceilLimit and verticalSpeed &gt; 0 then verticalSpeed = 0 end
		if rotV &lt;= floorLimit and verticalSpeed &lt; 0 then verticalSpeed = 0 end
	end

	output.setNumber(1, horizontalSpeed)
	output.setNumber(2, verticalSpeed)
	output.setBool(1, targetOnScreen)
	output.setBool(2, lock)
end

function onDraw()
	screen.setColor(255, 255, 255, 50)
	h = screen.getHeight()
	w = screen.getWidth()
	
	screen.drawCircle(w/2, h/2, 4)
	
	screen.setColor(0, 255, 0, 50)
	--Lines showing horizontal boundaries
	screen.drawLine(w*(1-fovXsize), 0, w*(1-fovXsize), h)
	screen.drawLine(w*fovXsize, 0, w*fovXsize, h)
	
	--Lines showing vertical boundaries
	screen.drawLine(0, h*fovYsize, w, h*fovYsize) 
	screen.drawLine(0, h*(1-fovYsize), w, h*(1-fovYsize))
	
	screen.setColor(255, 0, 0)
	screen.drawText(0, h - 5, ammoLeft)
	
	xPerc = (averagedAzimuth + cameraAzimuth) / (cameraAzimuth * 2)
	targetX = interpolation(0, w, xPerc)
	yPerc = (averagedElevation*(-1) + cameraElevation) / (cameraElevation * 2)
	targetY = interpolation(0, h, yPerc)

	if targetOnScreen then
		screen.setColor(255, 0, 0, 100)
		screen.drawCircle(targetX, targetY, 4)
		screen.drawTextBox(targetX + 5, targetY + 5, 20, 4, round(distance, 1), -1, 0)
	end
	
	screen.drawText(0, 5, compassStarting)
end'>
				<pos x="3.5" y="-1"/>
				<in1 component_id="123"/>
				<in2 component_id="104"/>
			</c0>
			<c1 id="107">
				<pos x="5" y="-0.25"/>
				<in1 component_id="105"/>
			</c1>
			<c2 id="108" i="1">
				<pos x="5" y="-0.75"/>
				<in1 component_id="105"/>
			</c2>
			<c3 id="114" count="7" offset="19">
				<pos x="0.5" y="-2"/>
				<inc component_id="4"/>
				<in1 component_id="137"/>
				<in2 component_id="138"/>
				<in3 component_id="112"/>
				<in4 component_id="113"/>
				<in5 component_id="144"/>
				<in6 component_id="160"/>
				<in7 component_id="161"/>
			</c3>
			<c4 id="123" count="3">
				<pos x="2" y="-1"/>
				<inc component_id="114"/>
				<in1 component_id="153"/>
				<in2 component_id="139"/>
				<in3 component_id="140"/>
			</c4>
			<c5 id="137">
				<pos x="-1" y="-0.75"/>
				<in1 component_id="136"/>
			</c5>
			<c6 id="138" i="1">
				<pos x="-1" y="-1.25"/>
				<in1 component_id="136"/>
			</c6>
			<c7 id="139">
				<pos x="0.5" y="1"/>
				<in1 component_id="136"/>
			</c7>
			<c8 id="140" i="1">
				<pos x="0.5" y="0.5"/>
				<in1 component_id="136"/>
			</c8>
			<c9 id="141" name="Rotation Speed">
				<pos x="-3.75" y="0.25"/>
				<min text="0.1" value="0.1"/>
				<max text="3" value="3"/>
				<int text="0.1" value="0.1"/>
				<v text="1" value="1"/>
			</c9>
			<c10 id="142" name="Ceiling Limit">
				<pos x="-2.75" y="0.25"/>
				<min text="0"/>
				<max text="1" value="1"/>
				<int text="0.1" value="0.1"/>
				<v text="0.9" value="0.9"/>
			</c10>
			<c11 id="147">
				<pos x="5" y="-1.25"/>
				<in1 component_id="105"/>
			</c11>
			<c12 id="148" name="Floor Limit">
				<pos x="-2.75" y="-0.25"/>
				<min text="0"/>
				<max text="-1" value="-1"/>
				<int text="0.1" value="0.1"/>
				<v text="-0.3" value="-0.3"/>
			</c12>
			<c13 id="151" i="1">
				<pos x="5" y="-1.75"/>
				<in1 component_id="105"/>
			</c13>
			<c14 id="153">
				<pos x="0.5" y="1.5"/>
				<in1 component_id="4"/>
			</c14>
			<c15 id="160" i="1">
				<pos x="-1" y="-3.25"/>
				<in1 component_id="159"/>
			</c15>
			<c16 id="161" i="2">
				<pos x="-1" y="-3.75"/>
				<in1 component_id="159"/>
			</c16>
			<c17 id="162" script='blocksAbove = property.getNumber("Blocks Above Radar")
lastTarget = {nil, nil, nil}
target = {nil, nil, nil}

azimuth = 0
elevation = 0

function compassToDeg(compass)
	return compass * -360 % 360	
end

function tiltToDeg(tilt)
	tilt = tilt * 4
	tilt = tilt * 90
	return tilt
end

function radarToDeg(r)
	return math.deg(r * 2 * math.pi)
end

function unpack(t, i)
	i = i or 1
    if t[i] ~= nil then
    	return t[i], unpack(t, i + 1)
    end
end

function getTarget(x, y, z, distance, compass, azimuth, tilt, elevation)
	absAzimuth = compassToDeg(compass) + radarToDeg(azimuth)
	radAzimuth = math.rad(absAzimuth)
	absElevation = tiltToDeg(tilt) + radarToDeg(elevation)
	radElevation = math.rad(absElevation)
	
	targetX = x + (math.sin(radAzimuth) * distance)
	targetY = y + (math.cos(radAzimuth) * distance)
	targetZ = z + (math.sin(radElevation) * distance)
	
	return {targetX, targetY, targetZ}
end

function isEmpty(arr)
	if next(arr) == nil then return true
	else return false end
end

function onTick()
	distance = input.getNumber(1)
	azimuth = input.getNumber(2)
	elevation = input.getNumber(3)
	x = input.getNumber(4)
	y = input.getNumber(5)
	z = input.getNumber(6) - (blocksAbove / 2)
	compass = input.getNumber(7)
	tilt = input.getNumber(8)
	
	if distance == 0 then
		lastTarget = {}
		target = {}
	else
		if not isEmpty(target) then lastTarget = target end
		target = getTarget(x, y, z, distance, compass, azimuth, tilt, elevation)
		
		if not isEmpty(lastTarget) then 
			xl, yl, zl = unpack(lastTarget)
			x, y, z = unpack(target)
			xd = (x - xl) * 60
			yd = (y - yl) * 60
			zd = (z - zl) * 60
		end
		
		
	end
end

-- Draw function that will be executed when this script renders to a screen
function onDraw()
	w = screen.getWidth()
	h = screen.getHeight()
	
	if not isEmpty(lastTarget) then
		screen.drawText(0, 5, "X: " .. azimuth)
		screen.drawText(0, 11, "Y: " .. elevation)
		screen.drawText(0, 17, "Z: " .. zd)
	end

end'>
				<pos x="2" y="-4.25"/>
				<in1 component_id="168"/>
			</c17>
			<c18 id="168" count="5" offset="3">
				<pos x="0.5" y="-5.25"/>
				<inc component_id="4"/>
				<in1 component_id="166"/>
				<in2 component_id="167"/>
				<in3 component_id="170"/>
				<in4 component_id="112"/>
				<in5 component_id="113"/>
			</c18>
			<c19 id="171" n="Is Radar Upside Down" on="Yes" off="No">
				<pos x="-3.75" y="-0.25"/>
			</c19>
			<c20 id="172" n="Blocks Above Radar">
				<pos x="-3.75" y="0.75"/>
				<v text="-9" value="-9"/>
			</c20>
		</component_states>
		<component_bridge_states>
			<c0 id="4">
				<pos x="-1" y="-0.25"/>
			</c0>
			<c1 id="7">
				<pos x="5" y="-2.25"/>
				<in1 component_id="105" node_index="1"/>
			</c1>
			<c2 id="88">
				<pos x="6.5" y="-0.25"/>
				<in1 component_id="107"/>
			</c2>
			<c3 id="91">
				<pos x="6.5" y="-0.75"/>
				<in1 component_id="108"/>
			</c3>
			<c4 id="104">
				<pos x="2" y="-2"/>
			</c4>
			<c5 id="112">
				<pos x="-1" y="-1.75"/>
			</c5>
			<c6 id="113">
				<pos x="-1" y="-2.25"/>
			</c6>
			<c7 id="136">
				<pos x="-3" y="-1.25"/>
			</c7>
			<c8 id="144">
				<pos x="-1" y="-2.75"/>
			</c8>
			<c9 id="146">
				<pos x="6.5" y="-1.25"/>
				<in1 component_id="147"/>
			</c9>
			<c10 id="150">
				<pos x="6.5" y="-1.75"/>
				<in1 component_id="151"/>
			</c10>
			<c11 id="159">
				<pos x="-3" y="-3.25"/>
			</c11>
			<c12 id="166">
				<pos x="-1" y="-4.5"/>
			</c12>
			<c13 id="167">
				<pos x="-1" y="-5"/>
			</c13>
			<c14 id="170">
				<pos x="-1" y="-5.5"/>
			</c14>
		</component_bridge_states>
		<group_states/>
	</group>
</microprocessor>

